
// comment tests

println(">>> Comments <<<");

1 + // this is a comment
2;

1 + /* this is also a comment */ 2;

1 + /* this is a 
		multiline
		comment */  2;

println(">>> End of comments <<<\n");

// integers

println(">>> Integer tests <<<");

println("5: " + 5);
println("#b10001: " + #b10001);
println("#xc0ff: " + #xc00ff);

println(">>> End of Integer tests <<<\n");

// characters

println(">>> Character tests <<<");

println("#cY: " + #cY);
println("#c\\\\: " + #c\\);
println("#c0072: " + #c0072);

println(">>> End of Character tests <<<\n");

// booleans

println(">>> Boolean tests <<<");

println("#t: " + #t);
println("#f: " + #f);
println("not #t: " + (not #t));
println("not #f: " + (not #f));
println("#t and #t: " + (#t and #t));
println("#t and #f: " + (#t and #f));
println("#f and #t: " + (#f and #t));
println("#f and #f: " + (#f and #f));
println("#t or #t: " + (#t or #t));
println("#t or #f: " + (#t or #f));
println("#f or #t: " + (#f or #t));
println("#f or #f: " + (#f or #f));
println("#f or not #f and #t: " + (#f or not #f and #t));

println(">>> End of Boolean tests <<<\n");

// variables

println(">>> Variables tests <<<");

x := 5;
y := #cQ;
z := -x;
def b #t;

f, g, h, i := "here", "are", "four", "strings";

println("x: " + x);
println("y: " + y);
println("z: " + z);
println("b: " + b);
println("f: " + f);
println("g: " + g);
println("h: " + h);
println("i: " + i);

println(">>> End of Variable tests <<<\n");

// string subtrings

println(">>> Substring tests <<<");

f, g, h, i := "here", "are", "four", "strings";

str := "Testing\ttesting\none\ttwo";

println(str);
println(substr(str, 5, 15));
println(substr(str, 1,0));
println(substr("one more\t test", 2, 10));

println(">>> End of Substring tests <<<\n");

// pairs

println(">>> Pair tests <<<");

p := pair(x, y);

println("p: " + p);
println("car(p): " + car(p));
println("cdr(p): " + cdr(p));
println("pair(z, p): " + pair(z, p));
println("pair?(x): " + pair?(x));

println(">>> End of pair tests <<<\n");

// lists

println(">>> List tests <<<");

l1 := list(x, y, z, b);
l2 := list(b, z, y, x);
q := [x, y, z, b];

println("l1: " + l1);
println("l2: " + l2);
println("q: " + q);
println("l2 @ q: " + l2 @ q);
println("l1 = l2: " + (l1 = l2));
println("l1 = q: " + (l1 = q));

println(">>> End of List tests <<<\n");

// let

println(">>> Let tests <<<");

println("(before let) x + z: " + (x + z));
println("let (x = 10, z = 4) x + z: " + (let (x = 10, z = 4) x + z));
println("(after let) x + z: " + (x + z));

myProc := proc(x,y,z) x ^ y - z;

println("myProc: " + myProc);
println("let(x = 3, y = 3, z = 5) call(myProc): " + (let(x = 3, y = 3, z = 5) call(myProc)));

println(">>> End of Let tests <<<\n");

// proc

println(">>> Proc tests <<<");

someProc := proc(x,y) x ^ y;

println("someProc: " + someProc);
println("someProc(5,3): " + someProc(5,3));
println("call(someProc, [2,5]): " + call(someProc, [2,5]));

otherProc := proc(x,y.z) list(x,y) @ z;

println("otherProc: " + otherProc);
println("otherProc(7,5,3,1): " + otherProc(7,5,3,1));
println("otherProc(\"try\" + \" this\", 2 ^ 4, #t or #f, #c_): " + otherProc("try" + " this", 2 ^ 4, #t or #f, #c_));
thirdProc := proc z z;

println("thirdProc: " + thirdProc);
println("thirdProc(7,5,3,1): " + thirdProc(7,5,3,1));
println("thirdProc(\"hello\", \"world\"): " + thirdProc("hello", "world"));

println("call(otherProc, list(\"try\" + \" this\", 2 ^ 4, #t or #f, #c_)): " + call(otherProc, list("try" + " this", 2 ^ 4, #t or #f, #c_)));

println(">>> End of Proc tests <<<\n");

// vector

println(">>> Vector tests <<<");

vec1 := [: 1, 2, 3, 4 :];
vec2 := [: x, 4: proc(n) "#" + (10 - n), #t, 3 :];
vec3 := [: x, 4: proc() "filler", #t, 3 :];

println("[: 1, 2, 3, 4 :]: " + vec1);
println("[: x, 4: proc(n) \"#\" + (10 - n), #t, 3 :]: " + vec2);
println("[: x, 4: proc() \"filler\", #t, 3 :]: " + vec3);

println("size(vec1): " + size(vec1));
println("size(vec2): " + size(vec2));
println("size(vec3): " + size(vec3));

println("vec1[0]: " + vec1[0]);
println("vec2[size(vec1)]: " + vec2[size(vec1)]);
println("vec3[4 / 2]: " + vec3[4 / 2]);

println(">>> End of Vector tests <<<\n");

// if

println(">>> If tests <<<");

print("if 5 ^ 3 < 100 then print(\"foo\") else print(\"bar\"): ");

if 5 ^ 3 < 100 
then println("foo");
else println("bar");

print("if 2 ^ 4 = 4 ^ 2 then print(\"foo\") else print(\"bar\"): ");

someStr := "test";

if 2 ^ 4 = 4 ^ 2 
then someStr := "foo";
else someStr := "bar";

println(someStr);

// cascading ifs

if not #t
then println("first if case");
else if #f
then println("second if case");
else println("else case");

println(">>> End of If tests <<<\n");

// read and readln

println(">>> Read tests <<<");

print("read << ");
rd := read();
println("read: " + rd);

print("readint << ");
ri := readint();
println("readint: " + ri);

println(">>> End of Read tests <<<\n");

// case

println(">>> Case tests <<<");

print("Enter a number between 1 and 10 << ");

num := readint();

case {
	num < 5 and num >= 1 : println("number is less than 5");
	num > 5 and num <= 10 : println("number is greater than 5");
	num = 5 : println("number is 5");
	else : println("number is out of range");
}

println(">>> End of Case tests <<<\n");