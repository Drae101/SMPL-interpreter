
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 17 19:13:06 EST 2016
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSmplException;
import smpl.values.SmplValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 17 19:13:06 EST 2016
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\005\005\000" +
    "\002\005\005\000\002\006\006\000\002\006\006\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\003\000\002\010\007" +
    "\000\002\013\005\000\002\011\004\000\002\011\003\000" +
    "\002\012\005\000\002\012\003\000\002\026\007\000\002" +
    "\026\011\000\002\026\005\000\002\027\004\000\002\027" +
    "\003\000\002\030\005\000\002\030\003\000\002\031\006" +
    "\000\002\037\005\000\002\037\003\000\002\040\005\000" +
    "\002\040\003\000\002\041\004\000\002\041\003\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\003" +
    "\000\002\043\005\000\002\043\005\000\002\043\003\000" +
    "\002\044\005\000\002\044\005\000\002\044\003\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\003\000\002\046\004\000\002\046\003\000\002\047\005" +
    "\000\002\047\003\000\002\050\004\000\002\050\004\000" +
    "\002\050\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\005\000\002\052\003" +
    "\000\002\052\003\000\002\054\003\000\002\054\003\000" +
    "\002\053\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\010\000\002\016\006\000\002\017\006\000\002\020" +
    "\006\000\002\021\012\000\002\032\004\000\002\032\003" +
    "\000\002\033\005\000\002\033\003\000\002\022\006\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\034\005\000\002\034\003\000\002\035\004\000\002\035" +
    "\003\000\002\036\005\000\002\036\003\000\002\024\006" +
    "\000\002\025\006\000\002\055\010\000\002\056\010\000" +
    "\002\061\005\000\002\057\010\000\002\057\006\000\002" +
    "\060\006\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\062\005\000\002\063\005" +
    "\000\002\064\007\000\002\065\004\000\002\065\003\000" +
    "\002\066\006\000\002\067\005\000\002\067\005\000\002" +
    "\070\005\000\002\070\003\000\002\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\112\005\032\007\030\011\116\016\120\020" +
    "\070\023\066\032\004\033\117\042\034\045\uff7e\046\072" +
    "\047\052\050\107\051\046\052\062\053\044\054\073\055" +
    "\021\056\040\057\115\060\025\061\053\062\121\063\102" +
    "\064\035\065\013\066\036\067\074\072\103\073\106\074" +
    "\026\075\006\076\005\077\043\100\104\101\056\001\002" +
    "\000\064\005\032\011\116\016\120\020\070\023\066\046" +
    "\072\047\052\050\107\051\046\054\073\055\021\057\115" +
    "\060\025\061\053\062\121\063\102\065\013\066\036\073" +
    "\106\074\026\075\006\076\005\077\043\100\104\101\127" +
    "\001\002\000\060\006\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7\071\uffb7\001\002" +
    "\000\060\006\uffba\012\uffba\013\uffba\014\uffba\015\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\043\uffba\044\uffba\071\uffba\001\002\000\060" +
    "\006\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\043\uffc1\044\uffc1\071\uffc1\001\002\000\060\006\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\043" +
    "\uffb3\044\uffb3\071\uffb3\001\002\000\116\002\ufffe\005\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\016\ufffe\020\ufffe\023\ufffe\032" +
    "\ufffe\033\ufffe\042\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076" +
    "\ufffe\077\ufffe\100\ufffe\101\ufffe\001\002\000\060\006\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\u0110\030\uffc9\031\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043" +
    "\uffc9\044\uffc9\071\uffc9\001\002\000\004\005\u010e\001\002" +
    "\000\120\002\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\016" +
    "\ufffb\020\ufffb\023\ufffb\032\ufffb\033\ufffb\042\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\072" +
    "\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb" +
    "\101\ufffb\001\002\000\060\006\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\071\uffb5" +
    "\001\002\000\024\006\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\021\uffe0\043\246\044\uffe0\071\uffe0\001\002\000\050" +
    "\006\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\021\uffd2\022" +
    "\207\023\210\030\uffd2\031\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\071\uffd2\001" +
    "\002\000\020\006\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\021\ufff4\071\ufff4\001\002\000\062\004\uff9c\006\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\043\uff9c" +
    "\044\uff9c\071\uff9c\001\002\000\060\006\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7" +
    "\071\uffc7\001\002\000\060\006\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044\uffbd\071\uffbd" +
    "\001\002\000\120\002\ufffc\005\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\016\ufffc\020\ufffc\023\ufffc\032\ufffc\033\ufffc\042\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070" +
    "\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc" +
    "\100\ufffc\101\ufffc\001\002\000\004\005\u0109\001\002\000" +
    "\060\006\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\043\uffbb\044\uffbb\071\uffbb\001\002\000\060\006" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\043\uffb6\044\uffb6\071\uffb6\001\002\000\112\005\032\007" +
    "\030\011\116\016\120\020\070\023\066\032\004\033\117" +
    "\042\034\045\uff7e\046\072\047\052\050\107\051\046\052" +
    "\062\053\044\054\073\055\021\056\040\057\115\060\025" +
    "\061\053\062\121\063\102\064\035\065\013\066\036\067" +
    "\074\072\103\073\106\074\026\075\006\076\005\077\043" +
    "\100\104\101\056\001\002\000\062\004\u0104\006\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2" +
    "\044\uffb2\071\uffb2\001\002\000\104\005\032\007\030\011" +
    "\116\016\120\020\070\023\066\032\004\033\117\042\034" +
    "\046\072\047\052\050\107\051\046\052\062\053\044\054" +
    "\073\055\021\056\040\057\115\060\025\061\053\062\121" +
    "\063\102\064\035\065\013\066\036\073\106\074\026\075" +
    "\006\076\005\077\043\100\104\101\127\001\002\000\020" +
    "\006\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\021\ufff3\071" +
    "\ufff3\001\002\000\066\005\032\011\116\016\120\020\070" +
    "\023\066\032\004\046\072\047\052\050\107\051\046\054" +
    "\073\055\021\057\115\060\025\061\053\062\121\063\102" +
    "\065\013\066\036\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\127\001\002\000\004\101\377\001\002" +
    "\000\004\005\375\001\002\000\060\006\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\043\uffab\044\uffab" +
    "\071\uffab\001\002\000\006\005\362\101\363\001\002\000" +
    "\060\006\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\043\uffb0\044\uffb0\071\uffb0\001\002\000\046\013" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\043\uffbe\044\uffbe\045\360\001\002\000\060" +
    "\006\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\043\uffb8\044\uffb8\071\uffb8\001\002\000\004\005\355" +
    "\001\002\000\060\006\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\071\uffaf\001\002" +
    "\000\004\005\352\001\002\000\024\006\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\021\uffde\043\uffde\044\uffde\071\uffde" +
    "\001\002\000\056\006\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\043\uffcb\044\uffcb\071\uffcb\001\002\000\060" +
    "\006\uffac\012\uffac\013\uffac\014\uffac\015\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\043\uffac\044\uffac\071\uffac\001\002\000\004\005\347" +
    "\001\002\000\004\005\342\001\002\000\060\006\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9" +
    "\044\uffa9\071\uffa9\001\002\000\060\006\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4" +
    "\071\uffb4\001\002\000\056\004\130\005\131\011\132\013" +
    "\uffbf\015\335\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\045\uff7e\001\002" +
    "\000\114\002\001\005\032\007\030\011\116\016\120\020" +
    "\070\023\066\032\004\033\117\042\034\045\uff7e\046\072" +
    "\047\052\050\107\051\046\052\062\053\044\054\073\055" +
    "\021\056\040\057\115\060\025\061\053\062\121\063\102" +
    "\064\035\065\013\066\036\067\074\072\103\073\106\074" +
    "\026\075\006\076\005\077\043\100\104\101\056\001\002" +
    "\000\004\013\333\001\002\000\060\006\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2" +
    "\071\uffc2\001\002\000\004\005\330\001\002\000\060\006" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\043\uffc0\044\uffc0\071\uffc0\001\002\000\060\006\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\043\uffaa" +
    "\044\uffaa\071\uffaa\001\002\000\004\002\327\001\002\000" +
    "\060\005\032\011\116\020\070\046\072\047\052\050\107" +
    "\051\046\054\073\055\021\057\115\060\025\061\053\062" +
    "\121\063\102\065\013\066\036\073\106\074\026\075\006" +
    "\076\005\077\043\100\104\101\127\001\002\000\060\006" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\043\uffb1\044\uffb1\071\uffb1\001\002\000\106\005\032\007" +
    "\030\011\116\016\120\020\070\021\uff7e\023\066\032\004" +
    "\033\117\042\034\046\072\047\052\050\107\051\046\052" +
    "\062\053\044\054\073\055\021\056\040\057\115\060\025" +
    "\061\053\062\121\063\102\064\035\065\013\066\036\073" +
    "\106\074\026\075\006\076\005\077\043\100\104\101\127" +
    "\001\002\000\004\013\311\001\002\000\004\005\304\001" +
    "\002\000\004\005\301\001\002\000\104\005\032\007\030" +
    "\011\116\016\120\020\070\023\066\032\004\033\117\042" +
    "\034\046\072\047\052\050\107\051\046\052\062\053\044" +
    "\054\073\055\021\056\040\057\115\060\025\061\053\062" +
    "\121\063\102\064\035\065\013\066\036\073\106\074\026" +
    "\075\006\076\005\077\043\100\104\101\127\001\002\000" +
    "\056\006\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\213\025\214\026\212\030\uffcf\031" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\043\uffcf\044\uffcf\071\uffcf\001\002\000\020\006\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\021\ufff5\071\ufff5\001\002" +
    "\000\004\045\270\001\002\000\010\006\uffe5\017\uffe5\045" +
    "\uffe5\001\002\000\060\006\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\043\uffae\044\uffae\071\uffae\001" +
    "\002\000\004\005\265\001\002\000\004\007\250\001\002" +
    "\000\060\006\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\043\uffb9\044\uffb9\071\uffb9\001\002\000\022" +
    "\006\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\021\ufff1\044" +
    "\244\071\ufff1\001\002\000\004\005\241\001\002\000\004" +
    "\005\236\001\002\000\040\006\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\021\uffdc\034\223\035\224\036\222\037\225" +
    "\040\226\041\227\043\uffdc\044\uffdc\071\uffdc\001\002\000" +
    "\020\006\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\021\ufff0" +
    "\071\ufff0\001\002\000\044\006\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\021\uffd5\030\204\031\205\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\071" +
    "\uffd5\001\002\000\060\006\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\043\uffad\044\uffad\071\uffad\001" +
    "\002\000\060\006\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\043\uffc4\044\uffc4\071\uffc4\001\002\000" +
    "\004\005\175\001\002\000\106\005\032\007\030\011\116" +
    "\012\uff7e\016\120\020\070\023\066\032\004\033\117\042" +
    "\034\046\072\047\052\050\107\051\046\052\062\053\044" +
    "\054\073\055\021\056\040\057\115\060\025\061\053\062" +
    "\121\063\102\064\035\065\013\066\036\073\106\074\026" +
    "\075\006\076\005\077\043\100\104\101\127\001\002\000" +
    "\004\005\155\001\002\000\060\005\032\011\116\020\070" +
    "\046\072\047\052\050\107\051\046\054\073\055\021\057" +
    "\115\060\025\061\053\062\121\063\102\065\013\066\036" +
    "\073\106\074\026\075\006\076\005\077\043\100\104\101" +
    "\127\001\002\000\004\005\124\001\002\000\060\006\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043" +
    "\uffc3\044\uffc3\071\uffc3\001\002\000\060\006\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\043\uffa8\044" +
    "\uffa8\071\uffa8\001\002\000\104\005\032\007\030\011\116" +
    "\016\120\020\070\023\066\032\004\033\117\042\034\046" +
    "\072\047\052\050\107\051\046\052\062\053\044\054\073" +
    "\055\021\056\040\057\115\060\025\061\053\062\121\063" +
    "\102\064\035\065\013\066\036\073\106\074\026\075\006" +
    "\076\005\077\043\100\104\101\127\001\002\000\060\006" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\043\uffbe\044\uffbe\071\uffbe\001\002\000\006\006\151\015" +
    "\150\001\002\000\066\004\130\005\131\006\uffbf\011\132" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043" +
    "\uffbf\044\uffbf\071\uffbf\001\002\000\012\011\116\054\073" +
    "\055\021\101\147\001\002\000\106\005\032\006\uff7e\007" +
    "\030\011\116\016\120\020\070\023\066\032\004\033\117" +
    "\042\034\046\072\047\052\050\107\051\046\052\062\053" +
    "\044\054\073\055\021\056\040\057\115\060\025\061\053" +
    "\062\121\063\102\064\035\065\013\066\036\073\106\074" +
    "\026\075\006\076\005\077\043\100\104\101\127\001\002" +
    "\000\104\005\032\007\030\011\116\016\120\020\070\023" +
    "\066\032\004\033\117\042\034\046\072\047\052\050\107" +
    "\051\046\052\062\053\044\054\073\055\021\056\040\057" +
    "\115\060\025\061\053\062\121\063\102\064\035\065\013" +
    "\066\036\073\106\074\026\075\006\076\005\077\043\100" +
    "\104\101\127\001\002\000\004\012\134\001\002\000\062" +
    "\006\uff94\012\uff94\013\uff94\014\uff94\015\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\043\uff94\044\uff94\045\uff94\071\uff94\001\002\000\004" +
    "\006\145\001\002\000\012\006\uff7e\012\uff7e\013\uff7e\015" +
    "\140\001\002\000\010\006\uffa1\012\uffa1\013\uffa1\001\002" +
    "\000\104\005\032\007\030\011\116\016\120\020\070\023" +
    "\066\032\004\033\117\042\034\046\072\047\052\050\107" +
    "\051\046\052\062\053\044\054\073\055\021\056\040\057" +
    "\115\060\025\061\053\062\121\063\102\064\035\065\013" +
    "\066\036\073\106\074\026\075\006\076\005\077\043\100" +
    "\104\101\127\001\002\000\010\006\uffa2\012\uffa2\013\uffa2" +
    "\001\002\000\010\006\uff9f\012\uff9f\013\uff9f\001\002\000" +
    "\012\006\uff7e\012\uff7e\013\uff7e\015\140\001\002\000\010" +
    "\006\uffa0\012\uffa0\013\uffa0\001\002\000\060\006\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2" +
    "\044\uffe2\071\uffe2\001\002\000\060\006\uff89\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\021\uff89\022\uff89\023\uff89\024\uff89" +
    "\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\043\uff89\044\uff89" +
    "\071\uff89\001\002\000\060\006\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\043\uff8b\044\uff8b\071\uff8b" +
    "\001\002\000\104\005\032\007\030\011\116\016\120\020" +
    "\070\023\066\032\004\033\117\042\034\046\072\047\052" +
    "\050\107\051\046\052\062\053\044\054\073\055\021\056" +
    "\040\057\115\060\025\061\053\062\121\063\102\064\035" +
    "\065\013\066\036\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\127\001\002\000\060\006\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\043\uff8e\044" +
    "\uff8e\071\uff8e\001\002\000\004\006\153\001\002\000\060" +
    "\006\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\043\uff8f\044\uff8f\071\uff8f\001\002\000\060\006\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043" +
    "\uffc6\044\uffc6\071\uffc6\001\002\000\006\006\uff7e\101\161" +
    "\001\002\000\004\006\uffec\001\002\000\006\006\uff7e\015" +
    "\166\001\002\000\004\006\164\001\002\000\004\034\162" +
    "\001\002\000\104\005\032\007\030\011\116\016\120\020" +
    "\070\023\066\032\004\033\117\042\034\046\072\047\052" +
    "\050\107\051\046\052\062\053\044\054\073\055\021\056" +
    "\040\057\115\060\025\061\053\062\121\063\102\064\035" +
    "\065\013\066\036\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\127\001\002\000\006\006\uffee\015\uffee" +
    "\001\002\000\104\005\032\007\030\011\116\016\120\020" +
    "\070\023\066\032\004\033\117\042\034\046\072\047\052" +
    "\050\107\051\046\052\062\053\044\054\073\055\021\056" +
    "\040\057\115\060\025\061\053\062\121\063\102\064\035" +
    "\065\013\066\036\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\127\001\002\000\020\006\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\021\uffef\071\uffef\001\002\000" +
    "\004\101\161\001\002\000\004\006\uffea\001\002\000\004" +
    "\006\uffed\001\002\000\006\006\uff7e\015\166\001\002\000" +
    "\004\006\uffeb\001\002\000\004\012\174\001\002\000\062" +
    "\004\uff9d\006\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\043\uff9d\044\uff9d\071\uff9d\001\002\000\104" +
    "\005\032\007\030\011\116\016\120\020\070\023\066\032" +
    "\004\033\117\042\034\046\072\047\052\050\107\051\046" +
    "\052\062\053\044\054\073\055\021\056\040\057\115\060" +
    "\025\061\053\062\121\063\102\064\035\065\013\066\036" +
    "\073\106\074\026\075\006\076\005\077\043\100\104\101" +
    "\127\001\002\000\004\015\177\001\002\000\104\005\032" +
    "\007\030\011\116\016\120\020\070\023\066\032\004\033" +
    "\117\042\034\046\072\047\052\050\107\051\046\052\062" +
    "\053\044\054\073\055\021\056\040\057\115\060\025\061" +
    "\053\062\121\063\102\064\035\065\013\066\036\073\106" +
    "\074\026\075\006\076\005\077\043\100\104\101\127\001" +
    "\002\000\004\015\201\001\002\000\104\005\032\007\030" +
    "\011\116\016\120\020\070\023\066\032\004\033\117\042" +
    "\034\046\072\047\052\050\107\051\046\052\062\053\044" +
    "\054\073\055\021\056\040\057\115\060\025\061\053\062" +
    "\121\063\102\064\035\065\013\066\036\073\106\074\026" +
    "\075\006\076\005\077\043\100\104\101\127\001\002\000" +
    "\004\006\203\001\002\000\060\006\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\043\uffa3\044\uffa3\071" +
    "\uffa3\001\002\000\066\005\032\011\116\016\120\020\070" +
    "\023\066\032\004\046\072\047\052\050\107\051\046\054" +
    "\073\055\021\057\115\060\025\061\053\062\121\063\102" +
    "\065\013\066\036\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\127\001\002\000\066\005\032\011\116" +
    "\016\120\020\070\023\066\032\004\046\072\047\052\050" +
    "\107\051\046\054\073\055\021\057\115\060\025\061\053" +
    "\062\121\063\102\065\013\066\036\073\106\074\026\075" +
    "\006\076\005\077\043\100\104\101\127\001\002\000\050" +
    "\006\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\021\uffd3\022" +
    "\207\023\210\030\uffd3\031\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\071\uffd3\001" +
    "\002\000\066\005\032\011\116\016\120\020\070\023\066" +
    "\032\004\046\072\047\052\050\107\051\046\054\073\055" +
    "\021\057\115\060\025\061\053\062\121\063\102\065\013" +
    "\066\036\073\106\074\026\075\006\076\005\077\043\100" +
    "\104\101\127\001\002\000\066\005\032\011\116\016\120" +
    "\020\070\023\066\032\004\046\072\047\052\050\107\051" +
    "\046\054\073\055\021\057\115\060\025\061\053\062\121" +
    "\063\102\065\013\066\036\073\106\074\026\075\006\076" +
    "\005\077\043\100\104\101\127\001\002\000\056\006\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\213\025\214\026\212\030\uffd0\031\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044" +
    "\uffd0\071\uffd0\001\002\000\066\005\032\011\116\016\120" +
    "\020\070\023\066\032\004\046\072\047\052\050\107\051" +
    "\046\054\073\055\021\057\115\060\025\061\053\062\121" +
    "\063\102\065\013\066\036\073\106\074\026\075\006\076" +
    "\005\077\043\100\104\101\127\001\002\000\066\005\032" +
    "\011\116\016\120\020\070\023\066\032\004\046\072\047" +
    "\052\050\107\051\046\054\073\055\021\057\115\060\025" +
    "\061\053\062\121\063\102\065\013\066\036\073\106\074" +
    "\026\075\006\076\005\077\043\100\104\101\127\001\002" +
    "\000\066\005\032\011\116\016\120\020\070\023\066\032" +
    "\004\046\072\047\052\050\107\051\046\054\073\055\021" +
    "\057\115\060\025\061\053\062\121\063\102\065\013\066" +
    "\036\073\106\074\026\075\006\076\005\077\043\100\104" +
    "\101\127\001\002\000\056\006\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\030\uffcd\031\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\071\uffcd\001\002" +
    "\000\056\006\uffce\012\uffce\013\uffce\014\uffce\015\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce" +
    "\031\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\043\uffce\044\uffce\071\uffce\001\002\000\056\006\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044" +
    "\uffcc\071\uffcc\001\002\000\056\006\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\021\uffd1\022\uffd1\023\uffd1\024\213\025" +
    "\214\026\212\030\uffd1\031\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\071\uffd1\001" +
    "\002\000\050\006\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\021\uffd4\022\207\023\210\030\uffd4\031\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4" +
    "\071\uffd4\001\002\000\066\005\032\011\116\016\120\020" +
    "\070\023\066\032\004\046\072\047\052\050\107\051\046" +
    "\054\073\055\021\057\115\060\025\061\053\062\121\063" +
    "\102\065\013\066\036\073\106\074\026\075\006\076\005" +
    "\077\043\100\104\101\127\001\002\000\066\005\032\011" +
    "\116\016\120\020\070\023\066\032\004\046\072\047\052" +
    "\050\107\051\046\054\073\055\021\057\115\060\025\061" +
    "\053\062\121\063\102\065\013\066\036\073\106\074\026" +
    "\075\006\076\005\077\043\100\104\101\127\001\002\000" +
    "\066\005\032\011\116\016\120\020\070\023\066\032\004" +
    "\046\072\047\052\050\107\051\046\054\073\055\021\057" +
    "\115\060\025\061\053\062\121\063\102\065\013\066\036" +
    "\073\106\074\026\075\006\076\005\077\043\100\104\101" +
    "\127\001\002\000\066\005\032\011\116\016\120\020\070" +
    "\023\066\032\004\046\072\047\052\050\107\051\046\054" +
    "\073\055\021\057\115\060\025\061\053\062\121\063\102" +
    "\065\013\066\036\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\127\001\002\000\066\005\032\011\116" +
    "\016\120\020\070\023\066\032\004\046\072\047\052\050" +
    "\107\051\046\054\073\055\021\057\115\060\025\061\053" +
    "\062\121\063\102\065\013\066\036\073\106\074\026\075" +
    "\006\076\005\077\043\100\104\101\127\001\002\000\066" +
    "\005\032\011\116\016\120\020\070\023\066\032\004\046" +
    "\072\047\052\050\107\051\046\054\073\055\021\057\115" +
    "\060\025\061\053\062\121\063\102\065\013\066\036\073" +
    "\106\074\026\075\006\076\005\077\043\100\104\101\127" +
    "\001\002\000\044\006\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\021\uffd6\030\204\031\205\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\071\uffd6\001" +
    "\002\000\044\006\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\021\uffd7\030\204\031\205\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\071\uffd7\001\002" +
    "\000\044\006\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\021" +
    "\uffd8\030\204\031\205\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\043\uffd8\044\uffd8\071\uffd8\001\002\000" +
    "\044\006\uffda\012\uffda\013\uffda\014\uffda\015\uffda\021\uffda" +
    "\030\204\031\205\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\043\uffda\044\uffda\071\uffda\001\002\000\044" +
    "\006\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\021\uffdb\030" +
    "\204\031\205\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\043\uffdb\044\uffdb\071\uffdb\001\002\000\044\006" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\021\uffd9\030\204" +
    "\031\205\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\043\uffd9\044\uffd9\071\uffd9\001\002\000\104\005\032" +
    "\007\030\011\116\016\120\020\070\023\066\032\004\033" +
    "\117\042\034\046\072\047\052\050\107\051\046\052\062" +
    "\053\044\054\073\055\021\056\040\057\115\060\025\061" +
    "\053\062\121\063\102\064\035\065\013\066\036\073\106" +
    "\074\026\075\006\076\005\077\043\100\104\101\127\001" +
    "\002\000\004\006\240\001\002\000\060\006\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\043\uffa5\044" +
    "\uffa5\071\uffa5\001\002\000\104\005\032\007\030\011\116" +
    "\016\120\020\070\023\066\032\004\033\117\042\034\046" +
    "\072\047\052\050\107\051\046\052\062\053\044\054\073" +
    "\055\021\056\040\057\115\060\025\061\053\062\121\063" +
    "\102\064\035\065\013\066\036\073\106\074\026\075\006" +
    "\076\005\077\043\100\104\101\127\001\002\000\004\006" +
    "\243\001\002\000\060\006\uff93\012\uff93\013\uff93\014\uff93" +
    "\015\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\027\uff93\030\uff93\031\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\043\uff93\044\uff93\071\uff93\001" +
    "\002\000\070\005\032\011\116\016\120\020\070\023\066" +
    "\032\004\042\034\046\072\047\052\050\107\051\046\054" +
    "\073\055\021\057\115\060\025\061\053\062\121\063\102" +
    "\065\013\066\036\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\127\001\002\000\024\006\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\021\uffe1\043\246\044\uffe1\071" +
    "\uffe1\001\002\000\070\005\032\011\116\016\120\020\070" +
    "\023\066\032\004\042\034\046\072\047\052\050\107\051" +
    "\046\054\073\055\021\057\115\060\025\061\053\062\121" +
    "\063\102\065\013\066\036\073\106\074\026\075\006\076" +
    "\005\077\043\100\104\101\127\001\002\000\024\006\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\021\uffdf\043\uffdf\044" +
    "\uffdf\071\uffdf\001\002\000\110\005\032\007\030\010\uff7e" +
    "\011\116\016\120\020\070\023\066\032\004\033\117\042" +
    "\034\046\072\047\052\050\107\051\046\052\062\053\044" +
    "\054\073\055\021\056\040\057\115\060\025\061\053\062" +
    "\121\063\102\064\035\065\013\066\036\070\253\073\106" +
    "\074\026\075\006\076\005\077\043\100\104\101\127\001" +
    "\002\000\004\010\264\001\002\000\004\013\262\001\002" +
    "\000\004\014\260\001\002\000\004\014\256\001\002\000" +
    "\004\010\uff7f\001\002\000\104\005\032\007\030\011\116" +
    "\016\120\020\070\023\066\032\004\033\117\042\034\046" +
    "\072\047\052\050\107\051\046\052\062\053\044\054\073" +
    "\055\021\056\040\057\115\060\025\061\053\062\121\063" +
    "\102\064\035\065\013\066\036\073\106\074\026\075\006" +
    "\076\005\077\043\100\104\101\127\001\002\000\004\013" +
    "\uff82\001\002\000\104\005\032\007\030\011\116\016\120" +
    "\020\070\023\066\032\004\033\117\042\034\046\072\047" +
    "\052\050\107\051\046\052\062\053\044\054\073\055\021" +
    "\056\040\057\115\060\025\061\053\062\121\063\102\064" +
    "\035\065\013\066\036\073\106\074\026\075\006\076\005" +
    "\077\043\100\104\101\127\001\002\000\004\013\uff81\001" +
    "\002\000\110\005\032\007\030\010\uff7e\011\116\016\120" +
    "\020\070\023\066\032\004\033\117\042\034\046\072\047" +
    "\052\050\107\051\046\052\062\053\044\054\073\055\021" +
    "\056\040\057\115\060\025\061\053\062\121\063\102\064" +
    "\035\065\013\066\036\070\253\073\106\074\026\075\006" +
    "\076\005\077\043\100\104\101\127\001\002\000\004\010" +
    "\uff80\001\002\000\120\002\uff83\005\uff83\007\uff83\010\uff83" +
    "\011\uff83\016\uff83\020\uff83\023\uff83\032\uff83\033\uff83\042" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83" +
    "\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\070\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077" +
    "\uff83\100\uff83\101\uff83\001\002\000\104\005\032\007\030" +
    "\011\116\016\120\020\070\023\066\032\004\033\117\042" +
    "\034\046\072\047\052\050\107\051\046\052\062\053\044" +
    "\054\073\055\021\056\040\057\115\060\025\061\053\062" +
    "\121\063\102\064\035\065\013\066\036\073\106\074\026" +
    "\075\006\076\005\077\043\100\104\101\127\001\002\000" +
    "\004\006\267\001\002\000\060\006\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\034\uff8d\035\uff8d" +
    "\036\uff8d\037\uff8d\040\uff8d\041\uff8d\043\uff8d\044\uff8d\071" +
    "\uff8d\001\002\000\106\005\032\007\030\011\116\013\uff7e" +
    "\016\120\020\070\023\066\032\004\033\117\042\034\046" +
    "\072\047\052\050\107\051\046\052\062\053\044\054\073" +
    "\055\021\056\040\057\115\060\025\061\053\062\121\063" +
    "\102\064\035\065\013\066\036\073\106\074\026\075\006" +
    "\076\005\077\043\100\104\101\127\001\002\000\004\013" +
    "\ufff9\001\002\000\004\071\273\001\002\000\112\005\032" +
    "\007\030\011\116\016\120\020\070\023\066\032\004\033" +
    "\117\042\034\045\uff7e\046\072\047\052\050\107\051\046" +
    "\052\062\053\044\054\073\055\021\056\040\057\115\060" +
    "\025\061\053\062\121\063\102\064\035\065\013\066\036" +
    "\067\074\072\103\073\106\074\026\075\006\076\005\077" +
    "\043\100\104\101\056\001\002\000\120\002\uff7e\005\uff7e" +
    "\007\uff7e\010\uff7e\011\uff7e\016\uff7e\020\uff7e\023\uff7e\032" +
    "\uff7e\033\uff7e\042\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e" +
    "\066\uff7e\067\uff7e\070\275\072\uff7e\073\uff7e\074\uff7e\075" +
    "\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\001\002\000\112" +
    "\005\032\007\030\011\116\016\120\020\070\023\066\032" +
    "\004\033\117\042\034\045\uff7e\046\072\047\052\050\107" +
    "\051\046\052\062\053\044\054\073\055\021\056\040\057" +
    "\115\060\025\061\053\062\121\063\102\064\035\065\013" +
    "\066\036\067\074\072\103\073\106\074\026\075\006\076" +
    "\005\077\043\100\104\101\056\001\002\000\120\002\uff84" +
    "\005\uff84\007\uff84\010\uff84\011\uff84\016\uff84\020\uff84\023" +
    "\uff84\032\uff84\033\uff84\042\uff84\045\uff84\046\uff84\047\uff84" +
    "\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\066\uff84\067\uff84\070\uff84\072\uff84\073\uff84\074" +
    "\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\001\002" +
    "\000\120\002\uff86\005\uff86\007\uff86\010\uff86\011\uff86\016" +
    "\uff86\020\uff86\023\uff86\032\uff86\033\uff86\042\uff86\045\uff86" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86" +
    "\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\072" +
    "\uff86\073\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86" +
    "\101\uff86\001\002\000\120\002\uff85\005\uff85\007\uff85\010" +
    "\uff85\011\uff85\016\uff85\020\uff85\023\uff85\032\uff85\033\uff85" +
    "\042\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052" +
    "\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85" +
    "\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067" +
    "\uff85\070\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85" +
    "\077\uff85\100\uff85\101\uff85\001\002\000\106\005\032\006" +
    "\uff7e\007\030\011\116\016\120\020\070\023\066\032\004" +
    "\033\117\042\034\046\072\047\052\050\107\051\046\052" +
    "\062\053\044\054\073\055\021\056\040\057\115\060\025" +
    "\061\053\062\121\063\102\064\035\065\013\066\036\073" +
    "\106\074\026\075\006\076\005\077\043\100\104\101\127" +
    "\001\002\000\004\006\303\001\002\000\062\004\uff9e\006" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\043\uff9e\044\uff9e\071\uff9e\001\002\000\104\005\032\007" +
    "\030\011\116\016\120\020\070\023\066\032\004\033\117" +
    "\042\034\046\072\047\052\050\107\051\046\052\062\053" +
    "\044\054\073\055\021\056\040\057\115\060\025\061\053" +
    "\062\121\063\102\064\035\065\013\066\036\073\106\074" +
    "\026\075\006\076\005\077\043\100\104\101\127\001\002" +
    "\000\004\015\306\001\002\000\104\005\032\007\030\011" +
    "\116\016\120\020\070\023\066\032\004\033\117\042\034" +
    "\046\072\047\052\050\107\051\046\052\062\053\044\054" +
    "\073\055\021\056\040\057\115\060\025\061\053\062\121" +
    "\063\102\064\035\065\013\066\036\073\106\074\026\075" +
    "\006\076\005\077\043\100\104\101\127\001\002\000\004" +
    "\006\310\001\002\000\060\006\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\043\uffa7\044\uffa7\071\uffa7" +
    "\001\002\000\120\002\ufffa\005\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\016\ufffa\020\ufffa\023\ufffa\032\ufffa\033\ufffa\042\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa" +
    "\100\ufffa\101\ufffa\001\002\000\004\021\325\001\002\000" +
    "\006\015\320\021\uff7e\001\002\000\010\014\316\015\uff99" +
    "\021\uff99\001\002\000\004\021\uff97\001\002\000\104\005" +
    "\032\007\030\011\116\016\120\020\070\023\066\032\004" +
    "\033\117\042\034\046\072\047\052\050\107\051\046\052" +
    "\062\053\044\054\073\055\021\056\040\057\115\060\025" +
    "\061\053\062\121\063\102\064\035\065\013\066\036\073" +
    "\106\074\026\075\006\076\005\077\043\100\104\101\127" +
    "\001\002\000\006\015\uff9a\021\uff9a\001\002\000\104\005" +
    "\032\007\030\011\116\016\120\020\070\023\066\032\004" +
    "\033\117\042\034\046\072\047\052\050\107\051\046\052" +
    "\062\053\044\054\073\055\021\056\040\057\115\060\025" +
    "\061\053\062\121\063\102\064\035\065\013\066\036\073" +
    "\106\074\026\075\006\076\005\077\043\100\104\101\127" +
    "\001\002\000\004\021\uff98\001\002\000\004\021\uff95\001" +
    "\002\000\006\015\320\021\uff7e\001\002\000\004\021\uff96" +
    "\001\002\000\060\006\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\043\uff9b\044\uff9b\071\uff9b\001\002" +
    "\000\060\006\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\071\uffc5\001\002\000\004" +
    "\002\000\001\002\000\104\005\032\007\030\011\116\016" +
    "\120\020\070\023\066\032\004\033\117\042\034\046\072" +
    "\047\052\050\107\051\046\052\062\053\044\054\073\055" +
    "\021\056\040\057\115\060\025\061\053\062\121\063\102" +
    "\064\035\065\013\066\036\073\106\074\026\075\006\076" +
    "\005\077\043\100\104\101\127\001\002\000\004\006\332" +
    "\001\002\000\020\006\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\021\ufff7\071\ufff7\001\002\000\120\002\ufffd\005\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\016\ufffd\020\ufffd\023\ufffd\032" +
    "\ufffd\033\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\070\ufffd\072\ufffd\073\ufffd\074\ufffd\075" +
    "\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\001\002\000\116" +
    "\002\uffff\005\uffff\007\uffff\010\uffff\011\uffff\016\uffff\020" +
    "\uffff\023\uffff\032\uffff\033\uffff\042\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\065\uffff\066\uffff\067\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff\001\002" +
    "\000\004\101\340\001\002\000\010\006\uffe6\017\uffe6\045" +
    "\uffe6\001\002\000\010\006\uffe3\017\uffe3\045\uffe3\001\002" +
    "\000\012\006\uff7e\015\335\017\uff7e\045\uff7e\001\002\000" +
    "\010\006\uffe4\017\uffe4\045\uffe4\001\002\000\104\005\032" +
    "\007\030\011\116\016\120\020\070\023\066\032\004\033" +
    "\117\042\034\046\072\047\052\050\107\051\046\052\062" +
    "\053\044\054\073\055\021\056\040\057\115\060\025\061" +
    "\053\062\121\063\102\064\035\065\013\066\036\073\106" +
    "\074\026\075\006\076\005\077\043\100\104\101\127\001" +
    "\002\000\004\015\344\001\002\000\104\005\032\007\030" +
    "\011\116\016\120\020\070\023\066\032\004\033\117\042" +
    "\034\046\072\047\052\050\107\051\046\052\062\053\044" +
    "\054\073\055\021\056\040\057\115\060\025\061\053\062" +
    "\121\063\102\064\035\065\013\066\036\073\106\074\026" +
    "\075\006\076\005\077\043\100\104\101\127\001\002\000" +
    "\004\006\346\001\002\000\060\006\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\034\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\043\uff91\044\uff91\071" +
    "\uff91\001\002\000\104\005\032\007\030\011\116\016\120" +
    "\020\070\023\066\032\004\033\117\042\034\046\072\047" +
    "\052\050\107\051\046\052\062\053\044\054\073\055\021" +
    "\056\040\057\115\060\025\061\053\062\121\063\102\064" +
    "\035\065\013\066\036\073\106\074\026\075\006\076\005" +
    "\077\043\100\104\101\127\001\002\000\004\006\351\001" +
    "\002\000\060\006\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\043\uffa6\044\uffa6\071\uffa6\001\002\000" +
    "\104\005\032\007\030\011\116\016\120\020\070\023\066" +
    "\032\004\033\117\042\034\046\072\047\052\050\107\051" +
    "\046\052\062\053\044\054\073\055\021\056\040\057\115" +
    "\060\025\061\053\062\121\063\102\064\035\065\013\066" +
    "\036\073\106\074\026\075\006\076\005\077\043\100\104" +
    "\101\127\001\002\000\004\006\354\001\002\000\060\006" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\043\uffa4\044\uffa4\071\uffa4\001\002\000\104\005\032\007" +
    "\030\011\116\016\120\020\070\023\066\032\004\033\117" +
    "\042\034\046\072\047\052\050\107\051\046\052\062\053" +
    "\044\054\073\055\021\056\040\057\115\060\025\061\053" +
    "\062\121\063\102\064\035\065\013\066\036\073\106\074" +
    "\026\075\006\076\005\077\043\100\104\101\127\001\002" +
    "\000\004\006\357\001\002\000\020\006\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\021\ufff6\071\ufff6\001\002\000\104" +
    "\005\032\007\030\011\116\016\120\020\070\023\066\032" +
    "\004\033\117\042\034\046\072\047\052\050\107\051\046" +
    "\052\062\053\044\054\073\055\021\056\040\057\115\060" +
    "\025\061\053\062\121\063\102\064\035\065\013\066\036" +
    "\073\106\074\026\075\006\076\005\077\043\100\104\101" +
    "\127\001\002\000\004\013\ufff8\001\002\000\010\006\uff7e" +
    "\017\uff7e\101\366\001\002\000\104\005\032\007\030\011" +
    "\116\016\120\020\070\023\066\032\004\033\117\042\034" +
    "\046\072\047\052\050\107\051\046\052\062\053\044\054" +
    "\073\055\021\056\040\057\115\060\025\061\053\062\121" +
    "\063\102\064\035\065\013\066\036\073\106\074\026\075" +
    "\006\076\005\077\043\100\104\101\127\001\002\000\020" +
    "\006\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\021\uffe7\071" +
    "\uffe7\001\002\000\006\006\367\017\370\001\002\000\010" +
    "\006\uff7e\015\335\017\uff7e\001\002\000\104\005\032\007" +
    "\030\011\116\016\120\020\070\023\066\032\004\033\117" +
    "\042\034\046\072\047\052\050\107\051\046\052\062\053" +
    "\044\054\073\055\021\056\040\057\115\060\025\061\053" +
    "\062\121\063\102\064\035\065\013\066\036\073\106\074" +
    "\026\075\006\076\005\077\043\100\104\101\127\001\002" +
    "\000\004\101\371\001\002\000\004\006\372\001\002\000" +
    "\104\005\032\007\030\011\116\016\120\020\070\023\066" +
    "\032\004\033\117\042\034\046\072\047\052\050\107\051" +
    "\046\052\062\053\044\054\073\055\021\056\040\057\115" +
    "\060\025\061\053\062\121\063\102\064\035\065\013\066" +
    "\036\073\106\074\026\075\006\076\005\077\043\100\104" +
    "\101\127\001\002\000\020\006\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\021\uffe8\071\uffe8\001\002\000\020\006\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\021\uffe9\071\uffe9\001" +
    "\002\000\004\006\376\001\002\000\060\006\uff87\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\021\uff87\022\uff87\023\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\034\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\043\uff87\044" +
    "\uff87\071\uff87\001\002\000\104\005\032\007\030\011\116" +
    "\016\120\020\070\023\066\032\004\033\117\042\034\046" +
    "\072\047\052\050\107\051\046\052\062\053\044\054\073" +
    "\055\021\056\040\057\115\060\025\061\053\062\121\063" +
    "\102\064\035\065\013\066\036\073\106\074\026\075\006" +
    "\076\005\077\043\100\104\101\127\001\002\000\020\006" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\021\uff90\071\uff90" +
    "\001\002\000\040\006\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\021\uffdd\034\223\035\224\036\222\037\225\040\226" +
    "\041\227\043\uffdd\044\uffdd\071\uffdd\001\002\000\004\006" +
    "\u0103\001\002\000\060\006\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\043\uffbc\044\uffbc\071\uffbc\001" +
    "\002\000\012\011\116\054\073\055\021\101\u0106\001\002" +
    "\000\060\006\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\043\uff8c\044\uff8c\071\uff8c\001\002\000\060" +
    "\006\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\043\uff8a\044\uff8a\071\uff8a\001\002\000\114\005\032" +
    "\007\030\010\u0108\011\116\016\120\020\070\023\066\032" +
    "\004\033\117\042\034\045\uff7e\046\072\047\052\050\107" +
    "\051\046\052\062\053\044\054\073\055\021\056\040\057" +
    "\115\060\025\061\053\062\121\063\102\064\035\065\013" +
    "\066\036\067\074\072\103\073\106\074\026\075\006\076" +
    "\005\077\043\100\104\101\056\001\002\000\020\006\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\021\ufff2\071\ufff2\001" +
    "\002\000\104\005\032\007\030\011\116\016\120\020\070" +
    "\023\066\032\004\033\117\042\034\046\072\047\052\050" +
    "\107\051\046\052\062\053\044\054\073\055\021\056\040" +
    "\057\115\060\025\061\053\062\121\063\102\064\035\065" +
    "\013\066\036\073\106\074\026\075\006\076\005\077\043" +
    "\100\104\101\127\001\002\000\004\015\u010b\001\002\000" +
    "\104\005\032\007\030\011\116\016\120\020\070\023\066" +
    "\032\004\033\117\042\034\046\072\047\052\050\107\051" +
    "\046\052\062\053\044\054\073\055\021\056\040\057\115" +
    "\060\025\061\053\062\121\063\102\064\035\065\013\066" +
    "\036\073\106\074\026\075\006\076\005\077\043\100\104" +
    "\101\127\001\002\000\004\006\u010d\001\002\000\060\006" +
    "\uff92\012\uff92\013\uff92\014\uff92\015\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\043\uff92\044\uff92\071\uff92\001\002\000\004\006\u010f\001" +
    "\002\000\060\006\uff88\012\uff88\013\uff88\014\uff88\015\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\034\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\043\uff88\044\uff88\071\uff88\001\002\000" +
    "\064\005\032\011\116\016\120\020\070\023\066\046\072" +
    "\047\052\050\107\051\046\054\073\055\021\057\115\060" +
    "\025\061\053\062\121\063\102\065\013\066\036\073\106" +
    "\074\026\075\006\076\005\077\043\100\104\101\127\001" +
    "\002\000\060\006\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\043\uffc8\044\uffc8\071\uffc8\001\002\000" +
    "\060\006\uffca\012\uffca\013\uffca\014\uffca\015\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\u0110\030" +
    "\uffca\031\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\043\uffca\044\uffca\071\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\134\002\064\003\056\004\010\005\057\006" +
    "\017\007\070\010\075\014\062\015\026\016\014\017\054" +
    "\020\007\021\044\022\030\023\066\024\041\025\040\026" +
    "\032\027\076\031\022\037\104\040\015\041\046\042\107" +
    "\043\111\044\016\045\074\046\047\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\061\110\062\053\063\122\064\023\066\013\071" +
    "\063\072\077\001\001\000\062\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\031\022\047\u0111\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\062\053\063" +
    "\122\071\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\132\003\u0106\004\010\005\057\006\017" +
    "\007\070\010\075\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\041\025\040\026\032" +
    "\027\076\031\022\037\104\040\015\041\046\042\107\043" +
    "\111\044\016\045\074\046\047\047\011\050\021\051\113" +
    "\052\121\053\060\054\006\055\100\056\112\057\050\060" +
    "\036\061\110\062\053\063\122\064\023\066\013\071\063" +
    "\072\077\001\001\000\002\001\001\000\114\006\017\007" +
    "\u0101\010\075\014\062\015\026\016\014\017\054\020\007" +
    "\021\044\022\030\023\066\024\124\025\040\026\032\031" +
    "\022\037\104\040\015\041\046\042\107\043\111\044\016" +
    "\045\074\046\047\047\011\050\021\051\113\052\121\053" +
    "\060\054\006\055\100\056\112\057\050\060\036\061\110" +
    "\062\053\063\122\071\063\001\001\000\002\001\001\000" +
    "\074\014\062\015\026\016\014\017\054\020\007\021\044" +
    "\022\030\023\066\024\124\025\040\031\022\042\u0100\043" +
    "\111\044\016\045\074\046\047\047\011\050\021\051\113" +
    "\052\121\053\060\054\006\055\100\056\112\057\050\060" +
    "\036\062\053\063\122\071\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\335\072\336\001\001\000\130\004\333\005\057" +
    "\006\017\007\070\010\075\014\062\015\026\016\014\017" +
    "\054\020\007\021\044\022\030\023\066\024\041\025\040" +
    "\026\032\027\076\031\022\037\104\040\015\041\046\042" +
    "\107\043\111\044\016\045\074\046\047\047\011\050\021" +
    "\051\113\052\121\053\060\054\006\055\100\056\112\057" +
    "\050\060\036\061\110\062\053\063\122\064\023\066\013" +
    "\071\063\072\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\014\062\015\026\016\014\017" +
    "\054\020\007\021\044\022\030\023\066\024\124\025\040" +
    "\031\022\051\325\052\121\053\060\054\006\055\100\056" +
    "\112\057\050\060\036\062\053\063\122\071\063\001\001" +
    "\000\002\001\001\000\122\006\017\007\313\010\075\014" +
    "\062\015\026\016\014\017\054\020\007\021\044\022\030" +
    "\023\066\024\124\025\040\026\032\031\022\034\312\035" +
    "\311\037\104\040\015\041\046\042\107\043\111\044\016" +
    "\045\074\046\047\047\011\050\021\051\113\052\121\053" +
    "\060\054\006\055\100\056\112\057\050\060\036\061\110" +
    "\062\053\063\122\071\063\072\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\114\006\017" +
    "\007\271\010\075\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\026\032" +
    "\031\022\037\104\040\015\041\046\042\107\043\111\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\061" +
    "\110\062\053\063\122\071\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\120\006\017\007\135\010\075\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\026\032\031\022\032\172\037\104\040\015\041\046" +
    "\042\107\043\111\044\016\045\074\046\047\047\011\050" +
    "\021\051\113\052\121\053\060\054\006\055\100\056\112" +
    "\057\050\060\036\061\110\062\053\063\122\071\063\072" +
    "\136\001\001\000\002\001\001\000\056\014\062\015\026" +
    "\016\014\017\054\020\007\021\044\022\030\023\066\024" +
    "\124\025\040\031\022\051\153\052\121\053\060\054\006" +
    "\055\100\056\112\057\050\060\036\062\053\063\122\071" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\114\006\017\007\125\010\075\014\062\015" +
    "\026\016\014\017\054\020\007\021\044\022\030\023\066" +
    "\024\124\025\040\026\032\031\022\037\104\040\015\041" +
    "\046\042\107\043\111\044\016\045\074\046\047\047\011" +
    "\050\021\051\113\052\121\053\060\054\006\055\100\056" +
    "\112\057\050\060\036\061\110\062\053\063\122\071\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\145\001\001\000\120\006\017\007\135" +
    "\010\075\014\062\015\026\016\014\017\054\020\007\021" +
    "\044\022\030\023\066\024\124\025\040\026\032\031\022" +
    "\032\134\037\104\040\015\041\046\042\107\043\111\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\061" +
    "\110\062\053\063\122\071\063\072\136\001\001\000\114" +
    "\006\017\007\132\010\075\014\062\015\026\016\014\017" +
    "\054\020\007\021\044\022\030\023\066\024\124\025\040" +
    "\026\032\031\022\037\104\040\015\041\046\042\107\043" +
    "\111\044\016\045\074\046\047\047\011\050\021\051\113" +
    "\052\121\053\060\054\006\055\100\056\112\057\050\060" +
    "\036\061\110\062\053\063\122\071\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\140\072\141\001\001\000\002\001\001\000\114\006\017" +
    "\007\142\010\075\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\026\032" +
    "\031\022\037\104\040\015\041\046\042\107\043\111\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\061" +
    "\110\062\053\063\122\071\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\143\072\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\114\006\017\007\151\010\075\014\062\015" +
    "\026\016\014\017\054\020\007\021\044\022\030\023\066" +
    "\024\124\025\040\026\032\031\022\037\104\040\015\041" +
    "\046\042\107\043\111\044\016\045\074\046\047\047\011" +
    "\050\021\051\113\052\121\053\060\054\006\055\100\056" +
    "\112\057\050\060\036\061\110\062\053\063\122\071\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\157\013\156\072\155" +
    "\001\001\000\002\001\001\000\006\012\167\072\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\114\006\017" +
    "\007\162\010\075\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\026\032" +
    "\031\022\037\104\040\015\041\046\042\107\043\111\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\061" +
    "\110\062\053\063\122\071\063\001\001\000\002\001\001" +
    "\000\114\006\017\007\164\010\075\014\062\015\026\016" +
    "\014\017\054\020\007\021\044\022\030\023\066\024\124" +
    "\025\040\026\032\031\022\037\104\040\015\041\046\042" +
    "\107\043\111\044\016\045\074\046\047\047\011\050\021" +
    "\051\113\052\121\053\060\054\006\055\100\056\112\057" +
    "\050\060\036\061\110\062\053\063\122\071\063\001\001" +
    "\000\002\001\001\000\004\013\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\171\072\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\006\017\007\175\010\075\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\026\032\031\022\037\104\040\015\041\046\042\107" +
    "\043\111\044\016\045\074\046\047\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\061\110\062\053\063\122\071\063\001\001\000" +
    "\002\001\001\000\114\006\017\007\177\010\075\014\062" +
    "\015\026\016\014\017\054\020\007\021\044\022\030\023" +
    "\066\024\124\025\040\026\032\031\022\037\104\040\015" +
    "\041\046\042\107\043\111\044\016\045\074\046\047\047" +
    "\011\050\021\051\113\052\121\053\060\054\006\055\100" +
    "\056\112\057\050\060\036\061\110\062\053\063\122\071" +
    "\063\001\001\000\002\001\001\000\114\006\017\007\201" +
    "\010\075\014\062\015\026\016\014\017\054\020\007\021" +
    "\044\022\030\023\066\024\124\025\040\026\032\031\022" +
    "\037\104\040\015\041\046\042\107\043\111\044\016\045" +
    "\074\046\047\047\011\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\061\110\062" +
    "\053\063\122\071\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\031\022" +
    "\044\220\045\074\046\047\047\011\050\021\051\113\052" +
    "\121\053\060\054\006\055\100\056\112\057\050\060\036" +
    "\062\053\063\122\071\063\001\001\000\070\014\062\015" +
    "\026\016\014\017\054\020\007\021\044\022\030\023\066" +
    "\024\124\025\040\031\022\044\205\045\074\046\047\047" +
    "\011\050\021\051\113\052\121\053\060\054\006\055\100" +
    "\056\112\057\050\060\036\062\053\063\122\071\063\001" +
    "\001\000\002\001\001\000\066\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\031\022\045\217\046\047\047\011\050\021\051\113" +
    "\052\121\053\060\054\006\055\100\056\112\057\050\060" +
    "\036\062\053\063\122\071\063\001\001\000\066\014\062" +
    "\015\026\016\014\017\054\020\007\021\044\022\030\023" +
    "\066\024\124\025\040\031\022\045\210\046\047\047\011" +
    "\050\021\051\113\052\121\053\060\054\006\055\100\056" +
    "\112\057\050\060\036\062\053\063\122\071\063\001\001" +
    "\000\002\001\001\000\064\014\062\015\026\016\014\017" +
    "\054\020\007\021\044\022\030\023\066\024\124\025\040" +
    "\031\022\046\216\047\011\050\021\051\113\052\121\053" +
    "\060\054\006\055\100\056\112\057\050\060\036\062\053" +
    "\063\122\071\063\001\001\000\064\014\062\015\026\016" +
    "\014\017\054\020\007\021\044\022\030\023\066\024\124" +
    "\025\040\031\022\046\215\047\011\050\021\051\113\052" +
    "\121\053\060\054\006\055\100\056\112\057\050\060\036" +
    "\062\053\063\122\071\063\001\001\000\064\014\062\015" +
    "\026\016\014\017\054\020\007\021\044\022\030\023\066" +
    "\024\124\025\040\031\022\046\214\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\062\053\063\122\071\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\014\062\015\026\016\014\017" +
    "\054\020\007\021\044\022\030\023\066\024\124\025\040" +
    "\031\022\043\234\044\016\045\074\046\047\047\011\050" +
    "\021\051\113\052\121\053\060\054\006\055\100\056\112" +
    "\057\050\060\036\062\053\063\122\071\063\001\001\000" +
    "\072\014\062\015\026\016\014\017\054\020\007\021\044" +
    "\022\030\023\066\024\124\025\040\031\022\043\233\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\062" +
    "\053\063\122\071\063\001\001\000\072\014\062\015\026" +
    "\016\014\017\054\020\007\021\044\022\030\023\066\024" +
    "\124\025\040\031\022\043\232\044\016\045\074\046\047" +
    "\047\011\050\021\051\113\052\121\053\060\054\006\055" +
    "\100\056\112\057\050\060\036\062\053\063\122\071\063" +
    "\001\001\000\072\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\031\022" +
    "\043\231\044\016\045\074\046\047\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\062\053\063\122\071\063\001\001\000\072\014" +
    "\062\015\026\016\014\017\054\020\007\021\044\022\030" +
    "\023\066\024\124\025\040\031\022\043\230\044\016\045" +
    "\074\046\047\047\011\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\062\053\063" +
    "\122\071\063\001\001\000\072\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\031\022\043\227\044\016\045\074\046\047\047\011" +
    "\050\021\051\113\052\121\053\060\054\006\055\100\056" +
    "\112\057\050\060\036\062\053\063\122\071\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\114" +
    "\006\017\007\236\010\075\014\062\015\026\016\014\017" +
    "\054\020\007\021\044\022\030\023\066\024\124\025\040" +
    "\026\032\031\022\037\104\040\015\041\046\042\107\043" +
    "\111\044\016\045\074\046\047\047\011\050\021\051\113" +
    "\052\121\053\060\054\006\055\100\056\112\057\050\060" +
    "\036\061\110\062\053\063\122\071\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\114\006\017\007\241\010" +
    "\075\014\062\015\026\016\014\017\054\020\007\021\044" +
    "\022\030\023\066\024\124\025\040\026\032\031\022\037" +
    "\104\040\015\041\046\042\107\043\111\044\016\045\074" +
    "\046\047\047\011\050\021\051\113\052\121\053\060\054" +
    "\006\055\100\056\112\057\050\060\036\061\110\062\053" +
    "\063\122\071\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\014\062\015\026\016\014\017\054\020\007" +
    "\021\044\022\030\023\066\024\124\025\040\031\022\040" +
    "\244\041\046\042\107\043\111\044\016\045\074\046\047" +
    "\047\011\050\021\051\113\052\121\053\060\054\006\055" +
    "\100\056\112\057\050\060\036\062\053\063\122\071\063" +
    "\001\001\000\002\001\001\000\076\014\062\015\026\016" +
    "\014\017\054\020\007\021\044\022\030\023\066\024\124" +
    "\025\040\031\022\041\246\042\107\043\111\044\016\045" +
    "\074\046\047\047\011\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\062\053\063" +
    "\122\071\063\001\001\000\002\001\001\000\122\006\017" +
    "\007\253\010\075\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\026\032" +
    "\031\022\037\104\040\015\041\046\042\107\043\111\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\061" +
    "\110\062\053\063\122\067\251\070\250\071\063\072\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\114\006\017" +
    "\007\256\010\075\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\026\032" +
    "\031\022\037\104\040\015\041\046\042\107\043\111\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\061" +
    "\110\062\053\063\122\071\063\001\001\000\002\001\001" +
    "\000\114\006\017\007\260\010\075\014\062\015\026\016" +
    "\014\017\054\020\007\021\044\022\030\023\066\024\124" +
    "\025\040\026\032\031\022\037\104\040\015\041\046\042" +
    "\107\043\111\044\016\045\074\046\047\047\011\050\021" +
    "\051\113\052\121\053\060\054\006\055\100\056\112\057" +
    "\050\060\036\061\110\062\053\063\122\071\063\001\001" +
    "\000\002\001\001\000\122\006\017\007\253\010\075\014" +
    "\062\015\026\016\014\017\054\020\007\021\044\022\030" +
    "\023\066\024\124\025\040\026\032\031\022\037\104\040" +
    "\015\041\046\042\107\043\111\044\016\045\074\046\047" +
    "\047\011\050\021\051\113\052\121\053\060\054\006\055" +
    "\100\056\112\057\050\060\036\061\110\062\053\063\122" +
    "\067\251\070\262\071\063\072\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\006\017\007\265\010\075" +
    "\014\062\015\026\016\014\017\054\020\007\021\044\022" +
    "\030\023\066\024\124\025\040\026\032\031\022\037\104" +
    "\040\015\041\046\042\107\043\111\044\016\045\074\046" +
    "\047\047\011\050\021\051\113\052\121\053\060\054\006" +
    "\055\100\056\112\057\050\060\036\061\110\062\053\063" +
    "\122\071\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\120\006\017\007\135\010\075\014\062\015\026\016" +
    "\014\017\054\020\007\021\044\022\030\023\066\024\124" +
    "\025\040\026\032\031\022\032\270\037\104\040\015\041" +
    "\046\042\107\043\111\044\016\045\074\046\047\047\011" +
    "\050\021\051\113\052\121\053\060\054\006\055\100\056" +
    "\112\057\050\060\036\061\110\062\053\063\122\071\063" +
    "\072\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\130\004\273\005\057\006\017\007\070\010\075\014\062" +
    "\015\026\016\014\017\054\020\007\021\044\022\030\023" +
    "\066\024\041\025\040\026\032\027\076\031\022\037\104" +
    "\040\015\041\046\042\107\043\111\044\016\045\074\046" +
    "\047\047\011\050\021\051\113\052\121\053\060\054\006" +
    "\055\100\056\112\057\050\060\036\061\110\062\053\063" +
    "\122\064\023\066\013\071\063\072\077\001\001\000\006" +
    "\065\276\072\275\001\001\000\130\004\277\005\057\006" +
    "\017\007\070\010\075\014\062\015\026\016\014\017\054" +
    "\020\007\021\044\022\030\023\066\024\041\025\040\026" +
    "\032\027\076\031\022\037\104\040\015\041\046\042\107" +
    "\043\111\044\016\045\074\046\047\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\061\110\062\053\063\122\064\023\066\013\071" +
    "\063\072\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\120\006\017\007\135\010\075\014" +
    "\062\015\026\016\014\017\054\020\007\021\044\022\030" +
    "\023\066\024\124\025\040\026\032\031\022\032\301\037" +
    "\104\040\015\041\046\042\107\043\111\044\016\045\074" +
    "\046\047\047\011\050\021\051\113\052\121\053\060\054" +
    "\006\055\100\056\112\057\050\060\036\061\110\062\053" +
    "\063\122\071\063\072\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\114\006\017\007\304\010\075\014\062" +
    "\015\026\016\014\017\054\020\007\021\044\022\030\023" +
    "\066\024\124\025\040\026\032\031\022\037\104\040\015" +
    "\041\046\042\107\043\111\044\016\045\074\046\047\047" +
    "\011\050\021\051\113\052\121\053\060\054\006\055\100" +
    "\056\112\057\050\060\036\061\110\062\053\063\122\071" +
    "\063\001\001\000\002\001\001\000\114\006\017\007\306" +
    "\010\075\014\062\015\026\016\014\017\054\020\007\021" +
    "\044\022\030\023\066\024\124\025\040\026\032\031\022" +
    "\037\104\040\015\041\046\042\107\043\111\044\016\045" +
    "\074\046\047\047\011\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\061\110\062" +
    "\053\063\122\071\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\320\072\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\114\006\017\007\316\010\075\014\062\015\026\016" +
    "\014\017\054\020\007\021\044\022\030\023\066\024\124" +
    "\025\040\026\032\031\022\037\104\040\015\041\046\042" +
    "\107\043\111\044\016\045\074\046\047\047\011\050\021" +
    "\051\113\052\121\053\060\054\006\055\100\056\112\057" +
    "\050\060\036\061\110\062\053\063\122\071\063\001\001" +
    "\000\002\001\001\000\116\006\017\007\313\010\075\014" +
    "\062\015\026\016\014\017\054\020\007\021\044\022\030" +
    "\023\066\024\124\025\040\026\032\031\022\034\322\037" +
    "\104\040\015\041\046\042\107\043\111\044\016\045\074" +
    "\046\047\047\011\050\021\051\113\052\121\053\060\054" +
    "\006\055\100\056\112\057\050\060\036\061\110\062\053" +
    "\063\122\071\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\323\072\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\006\017\007\330\010\075\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\026\032\031\022\037\104\040\015\041\046\042\107" +
    "\043\111\044\016\045\074\046\047\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\061\110\062\053\063\122\071\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\340\072\336\001\001\000\002\001\001" +
    "\000\114\006\017\007\342\010\075\014\062\015\026\016" +
    "\014\017\054\020\007\021\044\022\030\023\066\024\124" +
    "\025\040\026\032\031\022\037\104\040\015\041\046\042" +
    "\107\043\111\044\016\045\074\046\047\047\011\050\021" +
    "\051\113\052\121\053\060\054\006\055\100\056\112\057" +
    "\050\060\036\061\110\062\053\063\122\071\063\001\001" +
    "\000\002\001\001\000\114\006\017\007\344\010\075\014" +
    "\062\015\026\016\014\017\054\020\007\021\044\022\030" +
    "\023\066\024\124\025\040\026\032\031\022\037\104\040" +
    "\015\041\046\042\107\043\111\044\016\045\074\046\047" +
    "\047\011\050\021\051\113\052\121\053\060\054\006\055" +
    "\100\056\112\057\050\060\036\061\110\062\053\063\122" +
    "\071\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\006\017\007\347\010\075\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\026\032\031\022\037\104\040\015\041\046\042\107" +
    "\043\111\044\016\045\074\046\047\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\061\110\062\053\063\122\071\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\006\017\007\352" +
    "\010\075\014\062\015\026\016\014\017\054\020\007\021" +
    "\044\022\030\023\066\024\124\025\040\026\032\031\022" +
    "\037\104\040\015\041\046\042\107\043\111\044\016\045" +
    "\074\046\047\047\011\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\061\110\062" +
    "\053\063\122\071\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\114\006\017\007\355\010\075\014\062\015" +
    "\026\016\014\017\054\020\007\021\044\022\030\023\066" +
    "\024\124\025\040\026\032\031\022\037\104\040\015\041" +
    "\046\042\107\043\111\044\016\045\074\046\047\047\011" +
    "\050\021\051\113\052\121\053\060\054\006\055\100\056" +
    "\112\057\050\060\036\061\110\062\053\063\122\071\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\114\006" +
    "\017\007\360\010\075\014\062\015\026\016\014\017\054" +
    "\020\007\021\044\022\030\023\066\024\124\025\040\026" +
    "\032\031\022\037\104\040\015\041\046\042\107\043\111" +
    "\044\016\045\074\046\047\047\011\050\021\051\113\052" +
    "\121\053\060\054\006\055\100\056\112\057\050\060\036" +
    "\061\110\062\053\063\122\071\063\001\001\000\002\001" +
    "\001\000\006\027\364\072\077\001\001\000\114\006\017" +
    "\007\363\010\075\014\062\015\026\016\014\017\054\020" +
    "\007\021\044\022\030\023\066\024\124\025\040\026\032" +
    "\031\022\037\104\040\015\041\046\042\107\043\111\044" +
    "\016\045\074\046\047\047\011\050\021\051\113\052\121" +
    "\053\060\054\006\055\100\056\112\057\050\060\036\061" +
    "\110\062\053\063\122\071\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\335\072\336\001\001\000" +
    "\114\006\017\007\373\010\075\014\062\015\026\016\014" +
    "\017\054\020\007\021\044\022\030\023\066\024\124\025" +
    "\040\026\032\031\022\037\104\040\015\041\046\042\107" +
    "\043\111\044\016\045\074\046\047\047\011\050\021\051" +
    "\113\052\121\053\060\054\006\055\100\056\112\057\050" +
    "\060\036\061\110\062\053\063\122\071\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\006\017\007\372" +
    "\010\075\014\062\015\026\016\014\017\054\020\007\021" +
    "\044\022\030\023\066\024\124\025\040\026\032\031\022" +
    "\037\104\040\015\041\046\042\107\043\111\044\016\045" +
    "\074\046\047\047\011\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\061\110\062" +
    "\053\063\122\071\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\114\006" +
    "\017\007\377\010\075\014\062\015\026\016\014\017\054" +
    "\020\007\021\044\022\030\023\066\024\124\025\040\026" +
    "\032\031\022\037\104\040\015\041\046\042\107\043\111" +
    "\044\016\045\074\046\047\047\011\050\021\051\113\052" +
    "\121\053\060\054\006\055\100\056\112\057\050\060\036" +
    "\061\110\062\053\063\122\071\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\130\004\333\005\057\006\017\007\070\010\075" +
    "\014\062\015\026\016\014\017\054\020\007\021\044\022" +
    "\030\023\066\024\041\025\040\026\032\027\076\031\022" +
    "\037\104\040\015\041\046\042\107\043\111\044\016\045" +
    "\074\046\047\047\011\050\021\051\113\052\121\053\060" +
    "\054\006\055\100\056\112\057\050\060\036\061\110\062" +
    "\053\063\122\064\023\066\013\071\063\072\077\001\001" +
    "\000\002\001\001\000\114\006\017\007\u0109\010\075\014" +
    "\062\015\026\016\014\017\054\020\007\021\044\022\030" +
    "\023\066\024\124\025\040\026\032\031\022\037\104\040" +
    "\015\041\046\042\107\043\111\044\016\045\074\046\047" +
    "\047\011\050\021\051\113\052\121\053\060\054\006\055" +
    "\100\056\112\057\050\060\036\061\110\062\053\063\122" +
    "\071\063\001\001\000\002\001\001\000\114\006\017\007" +
    "\u010b\010\075\014\062\015\026\016\014\017\054\020\007" +
    "\021\044\022\030\023\066\024\124\025\040\026\032\031" +
    "\022\037\104\040\015\041\046\042\107\043\111\044\016" +
    "\045\074\046\047\047\011\050\021\051\113\052\121\053" +
    "\060\054\006\055\100\056\112\057\050\060\036\061\110" +
    "\062\053\063\122\071\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\014\062\015\026\016\014\017\054\020\007\021\044\022" +
    "\030\023\066\024\124\025\040\031\022\050\u0110\051\113" +
    "\052\121\053\060\054\006\055\100\056\112\057\050\060" +
    "\036\062\053\063\122\071\063\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //  This is no longer needed for CUP v0.11
		// Create a lexer that reads from
		// supplied input stream or standard input
		// if (in == null)
		//    in = System.in;
		// lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
		    	lexer.getColumn() +
		    	": Unrecognised token <" +
		    	lexer.getText() + ">";
		    throw new SyntaxSmplException(msg, ioe);
		}
	  
    }


		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " + 
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",56, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cases ::= empty 
            {
              ArrayList<ExpPair> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cases",54, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cases ::= _case SEMI cases 
            {
              ArrayList<ExpPair> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ExpPair c = (ExpPair)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<ExpPair> ca = (ArrayList<ExpPair>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			ca.add(0,c);
			RESULT = ca;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cases",54, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // _case ::= ELSE COLON expression 
            {
              ExpPair RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPair(new ExpLit(SmplValue.makeStrEscaped("else")),r); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("_case",53, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // _case ::= expression COLON expression 
            {
              ExpPair RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPair(c,r);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("_case",53, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expCase ::= CASE LBRACE cases RBRACE 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<ExpPair> c = (ArrayList<ExpPair>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new ExpCase(c);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expCase",52, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expElse ::= empty 
            {
              Exp RESULT =null;
		
		RESULT = null;
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expElse",51, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expElse ::= ELSE stmt 
            {
              Exp RESULT =null;
		int elseArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp elseArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = elseArg;
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expElse",51, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expIf ::= IF expression THEN stmt expElse 
            {
              Exp RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp con = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int ifArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int ifArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp ifArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int elseArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp elseArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpIf(con, ifArg, elseArg);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expIf",50, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // readint ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpReadInt();
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("readint",49, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpRead();
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",48, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // concatList ::= VARIABLE LSTCONCAT list 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp second = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",55, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // concatList ::= list LSTCONCAT VARIABLE 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp first = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",55, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // concatList ::= VARIABLE LSTCONCAT VARIABLE 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",55, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // concatList ::= list LSTCONCAT list 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp first = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp second = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",55, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpLazy(e);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("lazy",46, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // call ::= CALL LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCall(p);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("call",45, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCall(p,l);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("call",45, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // def ::= DEF VARIABLE expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpDef(v,e); 
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("def",47, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // equal ::= EQUAL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpEqual(a,b);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("equal",44, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // eqv ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpEqv(a,b);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("eqv",43, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // size ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpSize(e);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("size",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // vectorRef ::= VARIABLE LBRACKET expression RBRACKET 
            {
              ExpVectorRef RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpVectorRef(v,n);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vectorRef",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // vargsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargsAux",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // vargsAux ::= COMMA subvector vargsAux 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> vl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			vl.add(0,s);
			RESULT = vl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargsAux",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // vargs ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargs",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // vargs ::= subvector vargsAux 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> vl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			vl.add(0,s);
			RESULT = vl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargs",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // subvector ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 
				RESULT = e; 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subvector",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // subvector ::= expression COLON expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpSubVector(e1,e2);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subvector",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // vector ::= LVEC vargs RVEC 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpVector(v);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vector",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // list ::= EMPTYLIST 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // list ::= LBRACKET args RBRACKET 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // list ::= LIST LPAREN args RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // argsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // argsAux ::= COMMA expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // args ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // args ::= expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpSubStr(e1, e2, e3);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("substr",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cdr ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCdr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cdr",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // car ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCar(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("car",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // pairCheck ::= PAIRCHECK LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPairCheck(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pairCheck",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPair(e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pair",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // builtIn ::= readint 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // builtIn ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // builtIn ::= concatList 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // builtIn ::= lazy 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // builtIn ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // builtIn ::= equal 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // builtIn ::= eqv 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // builtIn ::= substr 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // builtIn ::= size 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // builtIn ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // builtIn ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // builtIn ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // builtIn ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // builtIn ::= pairCheck 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // builtIn ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolVal ::= BOOL 
            {
              SmplValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		boolean blit = (boolean)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(blit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolVal",41, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // strVal ::= CHARACTER 
            {
              SmplValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String chlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeChar(chlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",42, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // strVal ::= STRING 
            {
              SmplValue< ? > RESULT =null;
		int strlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int strlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String strlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeStrEscaped(strlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",42, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // val ::= REAL 
            {
              SmplValue< ? > RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(rlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // val ::= INTEGER 
            {
              SmplValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= procCallExp 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpProcedureCall pc = (ExpProcedureCall)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= vectorRef 
            {
              Exp RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpVectorRef vr = (ExpVectorRef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = vr; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= builtIn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= strVal 
            {
              Exp RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > sv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(sv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= boolVal 
            {
              Exp RESULT =null;
		int bvleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > bv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(bv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= val 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > n = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // posneg ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT  = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // posneg ::= MINUS factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // posneg ::= NEG factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // power ::= posneg 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // power ::= power POW posneg 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPow(p, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bitnot ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bitnot ::= BNOT power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBitWiseNot(p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= bitnot 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term MOD bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMod(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= term DIV bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpDiv(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term MUL bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMul(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // count ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // count ::= count MINUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpSub(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // count ::= count PLUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpAdd(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bitandor ::= count 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bitandor ::= bitandor BOR count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseOr(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bitandor ::= bitandor BAND count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseAnd(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relation ::= bitandor 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ao; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relation ::= relation NEQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpNeq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relation ::= relation GE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relation ::= relation LE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relation ::= relation LT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relation ::= relation GT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relation ::= relation EQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpEq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logicNot ::= relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logicNot ::= LNOT relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicNot(r); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logicAnd ::= logicNot 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logicAnd ::= logicAnd LAND logicNot 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicAnd(a, n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arithExp ::= logicAnd 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arithExp ::= arithExp LOR logicAnd 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicOr(e, a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procCallExp ::= VARIABLE LPAREN args RPAREN 
            {
              ExpProcedureCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new ExpProcedureCall(v, a);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procCallExp",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramsAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		
				RESULT = new ArrayList();
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramsAux",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramsAux ::= COMMA VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				pl.add(0,v);
				RESULT = pl;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramsAux",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params ::= empty 
            {
              ArrayList<String> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // params ::= VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			pl.add(0,v);
			RESULT = pl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procExp ::= PROC VARIABLE expression 
            {
              ExpProcedure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpProcedure(body, v);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procExp ::= PROC LPAREN params PERIOD VARIABLE RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpProcedure(ps, body, v);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procExp ::= PROC LPAREN params RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpProcedure(ps, body);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binding ::= VARIABLE EQ expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new Binding(v, e);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtLet(bs, body);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letStmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= def 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = body; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= procExp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpProcedure p = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= print 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtPrint p = (StmtPrint)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= letStmt 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e, '\n'); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // print ::= PRINT LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= vectorRef ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ExpVectorRef v = (ExpVectorRef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtDefinition(v,e);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= params ASSIGN args 
            {
              StmtDefinition RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtDefinition(p, a); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expCase 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expIf 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtSequence(s);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				lst.add(s);
				RESULT = lst;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

