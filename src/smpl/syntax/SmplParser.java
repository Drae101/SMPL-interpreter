
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 16 18:08:29 EST 2016
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSmplException;
import smpl.values.SmplValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 16 18:08:29 EST 2016
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\005\005\000\002\006\006\000\002\006\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\007\000\002\013\005\000\002\011\004" +
    "\000\002\011\003\000\002\012\005\000\002\012\003\000" +
    "\002\023\007\000\002\023\011\000\002\023\005\000\002" +
    "\024\004\000\002\024\003\000\002\025\005\000\002\025" +
    "\003\000\002\026\006\000\002\031\005\000\002\031\003" +
    "\000\002\032\005\000\002\032\003\000\002\033\004\000" +
    "\002\033\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\005\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\003\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\003\000\002\040\004\000\002\040" +
    "\003\000\002\041\005\000\002\041\003\000\002\042\004" +
    "\000\002\042\004\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\005\000\002\044" +
    "\003\000\002\044\003\000\002\046\003\000\002\046\003" +
    "\000\002\045\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\015\010\000\002\016\006\000" +
    "\002\017\006\000\002\020\006\000\002\021\012\000\002" +
    "\027\004\000\002\027\003\000\002\030\005\000\002\030" +
    "\003\000\002\022\006\000\002\022\005\000\002\022\003" +
    "\000\002\047\010\000\002\050\010\000\002\053\005\000" +
    "\002\051\010\000\002\051\006\000\002\052\006\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\054\005\000\002\055\005\000\002\056\007" +
    "\000\002\057\004\000\002\061\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\104\005\031\007\027\011\107\015\111\020" +
    "\063\027\004\030\110\037\033\042\uff92\043\065\044\047" +
    "\045\100\046\043\047\057\050\041\051\066\052\020\053" +
    "\036\054\106\055\024\056\050\057\112\060\075\061\034" +
    "\062\013\063\035\064\067\070\025\071\006\072\005\073" +
    "\040\074\076\075\052\001\002\000\060\005\031\011\107" +
    "\015\111\020\063\043\065\044\047\045\100\046\043\051" +
    "\066\052\020\054\106\055\024\056\050\057\112\060\075" +
    "\062\013\063\035\070\025\071\006\072\005\073\040\074" +
    "\076\075\117\001\002\000\056\006\uffba\012\uffba\013\uffba" +
    "\014\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\040\uffba\041\uffba\065\uffba\066\uffba\001" +
    "\002\000\056\006\uffbd\012\uffbd\013\uffbd\014\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\040\uffbd\041\uffbd\065\uffbd\066\uffbd\001\002\000\056\006" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\041\uffc3" +
    "\065\uffc3\066\uffc3\001\002\000\056\006\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\065\uffb6\066\uffb6" +
    "\001\002\000\110\002\ufffe\005\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\015\ufffe\020\ufffe\027\ufffe\030\ufffe\037\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\070\ufffe\071" +
    "\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\001\002\000\056" +
    "\006\uffcb\012\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\346\025\uffcb\026\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041" +
    "\uffcb\065\uffcb\066\uffcb\001\002\000\004\005\344\001\002" +
    "\000\056\006\uffb8\012\uffb8\013\uffb8\014\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040" +
    "\uffb8\041\uffb8\065\uffb8\066\uffb8\001\002\000\022\006\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\040\230\041\uffe2\065\uffe2\066" +
    "\uffe2\001\002\000\046\006\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\017\174\020\175\025\uffd4\026\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\065\uffd4" +
    "\066\uffd4\001\002\000\016\006\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\065\ufff7\066\ufff7\001\002\000\060\004\uffa1\006\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\040\uffa1\041\uffa1\065" +
    "\uffa1\066\uffa1\001\002\000\056\006\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\040\uffc9\041\uffc9\065\uffc9\066\uffc9\001" +
    "\002\000\056\006\uffc0\012\uffc0\013\uffc0\014\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\040\uffc0\041\uffc0\065\uffc0\066\uffc0\001\002\000\016\006" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\065\ufff2\066\ufff2\001\002" +
    "\000\004\005\337\001\002\000\056\006\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\065\uffbe\066\uffbe" +
    "\001\002\000\056\006\uffb9\012\uffb9\013\uffb9\014\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\040\uffb9\041\uffb9\065\uffb9\066\uffb9\001\002\000\104" +
    "\005\031\007\027\011\107\015\111\020\063\027\004\030" +
    "\110\037\033\042\uff92\043\065\044\047\045\100\046\043" +
    "\047\057\050\041\051\066\052\020\053\036\054\106\055" +
    "\024\056\050\057\112\060\075\061\034\062\013\063\035" +
    "\064\067\070\025\071\006\072\005\073\040\074\076\075" +
    "\052\001\002\000\060\004\332\006\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\040\uffb5\041\uffb5\065\uffb5\066\uffb5\001" +
    "\002\000\102\005\031\007\027\011\107\015\111\020\063" +
    "\027\004\030\110\037\033\043\065\044\047\045\100\046" +
    "\043\047\057\050\041\051\066\052\020\053\036\054\106" +
    "\055\024\056\050\057\112\060\075\061\034\062\013\063" +
    "\035\064\067\070\025\071\006\072\005\073\040\074\076" +
    "\075\117\001\002\000\016\006\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\065\ufff6\066\ufff6\001\002\000\062\005\031\011\107" +
    "\015\111\020\063\027\004\043\065\044\047\045\100\046" +
    "\043\051\066\052\020\054\106\055\024\056\050\057\112" +
    "\060\075\062\013\063\035\070\025\071\006\072\005\073" +
    "\040\074\076\075\117\001\002\000\004\075\325\001\002" +
    "\000\004\005\323\001\002\000\006\005\310\075\311\001" +
    "\002\000\056\006\uffb0\012\uffb0\013\uffb0\014\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\040\uffb0\041\uffb0\065\uffb0\066\uffb0\001\002\000\056\006" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb" +
    "\065\uffbb\066\uffbb\001\002\000\004\005\305\001\002\000" +
    "\056\006\uffb4\012\uffb4\013\uffb4\014\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4" +
    "\041\uffb4\065\uffb4\066\uffb4\001\002\000\004\005\302\001" +
    "\002\000\054\006\uffcd\012\uffcd\013\uffcd\014\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\025\uffcd\026\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\041\uffcd\065\uffcd\066\uffcd\001\002\000\022\006\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\040\uffe0\041\uffe0\065\uffe0\066\uffe0" +
    "\001\002\000\056\006\uffb1\012\uffb1\013\uffb1\014\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\040\uffb1\041\uffb1\065\uffb1\066\uffb1\001\002\000\004" +
    "\005\277\001\002\000\004\005\272\001\002\000\056\006" +
    "\uffae\012\uffae\013\uffae\014\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae\041\uffae" +
    "\065\uffae\066\uffae\001\002\000\054\004\120\005\121\013" +
    "\uffc1\014\266\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uff92\001\002" +
    "\000\056\006\uffb7\012\uffb7\013\uffb7\014\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\041\uffb7\065\uffb7\066\uffb7\001\002\000\106\002\001" +
    "\005\031\007\027\011\107\015\111\020\063\027\004\030" +
    "\110\037\033\042\uff92\043\065\044\047\045\100\046\043" +
    "\047\057\050\041\051\066\052\020\053\036\054\106\055" +
    "\024\056\050\057\112\060\075\061\034\062\013\063\035" +
    "\064\067\070\025\071\006\072\005\073\040\074\076\075" +
    "\052\001\002\000\004\013\263\001\002\000\056\006\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\065" +
    "\uffc4\066\uffc4\001\002\000\004\005\260\001\002\000\056" +
    "\006\uffc2\012\uffc2\013\uffc2\014\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2\041" +
    "\uffc2\065\uffc2\066\uffc2\001\002\000\056\006\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\065\uffaf\066" +
    "\uffaf\001\002\000\004\002\257\001\002\000\054\005\031" +
    "\011\107\043\065\044\047\045\100\046\043\051\066\052" +
    "\020\054\106\055\024\056\050\057\112\060\075\062\013" +
    "\063\035\070\025\071\006\072\005\073\040\074\076\075" +
    "\117\001\002\000\004\013\255\001\002\000\004\005\250" +
    "\001\002\000\004\005\245\001\002\000\102\005\031\007" +
    "\027\011\107\015\111\020\063\027\004\030\110\037\033" +
    "\043\065\044\047\045\100\046\043\047\057\050\041\051" +
    "\066\052\020\053\036\054\106\055\024\056\050\057\112" +
    "\060\075\061\034\062\013\063\035\064\067\070\025\071" +
    "\006\072\005\073\040\074\076\075\117\001\002\000\054" +
    "\006\uffd1\012\uffd1\013\uffd1\014\uffd1\017\uffd1\020\uffd1\021" +
    "\200\022\201\023\177\025\uffd1\026\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\065" +
    "\uffd1\066\uffd1\001\002\000\016\006\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\065\ufff8\066\ufff8\001\002\000\010\006\uffe7\016" +
    "\uffe7\042\uffe7\001\002\000\004\042\235\001\002\000\056" +
    "\006\uffb3\012\uffb3\013\uffb3\014\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041" +
    "\uffb3\065\uffb3\066\uffb3\001\002\000\004\005\232\001\002" +
    "\000\056\006\uffbc\012\uffbc\013\uffbc\014\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040" +
    "\uffbc\041\uffbc\065\uffbc\066\uffbc\001\002\000\020\006\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\041\226\065\ufff4\066\ufff4\001" +
    "\002\000\004\005\223\001\002\000\036\006\uffde\012\uffde" +
    "\013\uffde\014\uffde\031\207\032\211\033\210\034\212\035" +
    "\213\036\214\040\uffde\041\uffde\065\uffde\066\uffde\001\002" +
    "\000\016\006\ufff3\012\ufff3\013\ufff3\014\ufff3\065\ufff3\066" +
    "\ufff3\001\002\000\056\006\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\040\uffb2\041\uffb2\065\uffb2\066\uffb2\001\002\000" +
    "\042\006\uffd7\012\uffd7\013\uffd7\014\uffd7\025\171\026\172" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040" +
    "\uffd7\041\uffd7\065\uffd7\066\uffd7\001\002\000\056\006\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\065" +
    "\uffc6\066\uffc6\001\002\000\004\005\162\001\002\000\104" +
    "\005\031\007\027\011\107\012\uff92\015\111\020\063\027" +
    "\004\030\110\037\033\043\065\044\047\045\100\046\043" +
    "\047\057\050\041\051\066\052\020\053\036\054\106\055" +
    "\024\056\050\057\112\060\075\061\034\062\013\063\035" +
    "\064\067\070\025\071\006\072\005\073\040\074\076\075" +
    "\117\001\002\000\004\005\142\001\002\000\054\005\031" +
    "\011\107\043\065\044\047\045\100\046\043\051\066\052" +
    "\020\054\106\055\024\056\050\057\112\060\075\062\013" +
    "\063\035\070\025\071\006\072\005\073\040\074\076\075" +
    "\117\001\002\000\004\005\115\001\002\000\056\006\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5\065" +
    "\uffc5\066\uffc5\001\002\000\056\006\uffad\012\uffad\013\uffad" +
    "\014\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\040\uffad\041\uffad\065\uffad\066\uffad\001" +
    "\002\000\102\005\031\007\027\011\107\015\111\020\063" +
    "\027\004\030\110\037\033\043\065\044\047\045\100\046" +
    "\043\047\057\050\041\051\066\052\020\053\036\054\106" +
    "\055\024\056\050\057\112\060\075\061\034\062\013\063" +
    "\035\064\067\070\025\071\006\072\005\073\040\074\076" +
    "\075\117\001\002\000\006\006\136\014\135\001\002\000" +
    "\062\004\120\005\121\006\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\040\uffc1\041\uffc1\065\uffc1\066\uffc1\001\002\000" +
    "\012\011\107\051\066\052\020\075\134\001\002\000\104" +
    "\005\031\006\uff92\007\027\011\107\015\111\020\063\027" +
    "\004\030\110\037\033\043\065\044\047\045\100\046\043" +
    "\047\057\050\041\051\066\052\020\053\036\054\106\055" +
    "\024\056\050\057\112\060\075\061\034\062\013\063\035" +
    "\064\067\070\025\071\006\072\005\073\040\074\076\075" +
    "\117\001\002\000\010\006\uffa6\012\uffa6\013\uffa6\001\002" +
    "\000\012\006\uff92\012\uff92\013\uff92\014\126\001\002\000" +
    "\004\006\125\001\002\000\056\006\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\040\uffe4\041\uffe4\065\uffe4\066\uffe4\001" +
    "\002\000\102\005\031\007\027\011\107\015\111\020\063" +
    "\027\004\030\110\037\033\043\065\044\047\045\100\046" +
    "\043\047\057\050\041\051\066\052\020\053\036\054\106" +
    "\055\024\056\050\057\112\060\075\061\034\062\013\063" +
    "\035\064\067\070\025\071\006\072\005\073\040\074\076" +
    "\075\117\001\002\000\010\006\uffa7\012\uffa7\013\uffa7\001" +
    "\002\000\010\006\uffa4\012\uffa4\013\uffa4\001\002\000\012" +
    "\006\uff92\012\uff92\013\uff92\014\126\001\002\000\010\006" +
    "\uffa5\012\uffa5\013\uffa5\001\002\000\056\006\uff97\012\uff97" +
    "\013\uff97\014\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\040\uff97\041\uff97\065\uff97\066" +
    "\uff97\001\002\000\056\006\uff99\012\uff99\013\uff99\014\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\040\uff99\041\uff99\065\uff99\066\uff99\001\002\000" +
    "\102\005\031\007\027\011\107\015\111\020\063\027\004" +
    "\030\110\037\033\043\065\044\047\045\100\046\043\047" +
    "\057\050\041\051\066\052\020\053\036\054\106\055\024" +
    "\056\050\057\112\060\075\061\034\062\013\063\035\064" +
    "\067\070\025\071\006\072\005\073\040\074\076\075\117" +
    "\001\002\000\056\006\uff9c\012\uff9c\013\uff9c\014\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\040\uff9c\041\uff9c\065\uff9c\066\uff9c\001\002\000\004" +
    "\006\140\001\002\000\056\006\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\040\uff9d\041\uff9d\065\uff9d\066\uff9d\001\002" +
    "\000\056\006\uffc8\012\uffc8\013\uffc8\014\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\040" +
    "\uffc8\041\uffc8\065\uffc8\066\uffc8\001\002\000\006\006\uff92" +
    "\075\146\001\002\000\004\006\uffee\001\002\000\006\006" +
    "\uff92\014\153\001\002\000\004\006\151\001\002\000\004" +
    "\031\147\001\002\000\102\005\031\007\027\011\107\015" +
    "\111\020\063\027\004\030\110\037\033\043\065\044\047" +
    "\045\100\046\043\047\057\050\041\051\066\052\020\053" +
    "\036\054\106\055\024\056\050\057\112\060\075\061\034" +
    "\062\013\063\035\064\067\070\025\071\006\072\005\073" +
    "\040\074\076\075\117\001\002\000\006\006\ufff0\014\ufff0" +
    "\001\002\000\102\005\031\007\027\011\107\015\111\020" +
    "\063\027\004\030\110\037\033\043\065\044\047\045\100" +
    "\046\043\047\057\050\041\051\066\052\020\053\036\054" +
    "\106\055\024\056\050\057\112\060\075\061\034\062\013" +
    "\063\035\064\067\070\025\071\006\072\005\073\040\074" +
    "\076\075\117\001\002\000\016\006\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\065\ufff1\066\ufff1\001\002\000\004\075\146\001" +
    "\002\000\004\006\uffec\001\002\000\004\006\uffef\001\002" +
    "\000\006\006\uff92\014\153\001\002\000\004\006\uffed\001" +
    "\002\000\004\012\161\001\002\000\060\004\uffa2\006\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2\041\uffa2\065" +
    "\uffa2\066\uffa2\001\002\000\102\005\031\007\027\011\107" +
    "\015\111\020\063\027\004\030\110\037\033\043\065\044" +
    "\047\045\100\046\043\047\057\050\041\051\066\052\020" +
    "\053\036\054\106\055\024\056\050\057\112\060\075\061" +
    "\034\062\013\063\035\064\067\070\025\071\006\072\005" +
    "\073\040\074\076\075\117\001\002\000\004\014\164\001" +
    "\002\000\102\005\031\007\027\011\107\015\111\020\063" +
    "\027\004\030\110\037\033\043\065\044\047\045\100\046" +
    "\043\047\057\050\041\051\066\052\020\053\036\054\106" +
    "\055\024\056\050\057\112\060\075\061\034\062\013\063" +
    "\035\064\067\070\025\071\006\072\005\073\040\074\076" +
    "\075\117\001\002\000\004\014\166\001\002\000\102\005" +
    "\031\007\027\011\107\015\111\020\063\027\004\030\110" +
    "\037\033\043\065\044\047\045\100\046\043\047\057\050" +
    "\041\051\066\052\020\053\036\054\106\055\024\056\050" +
    "\057\112\060\075\061\034\062\013\063\035\064\067\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\004\006\170\001\002\000\056\006\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8\065\uffa8\066\uffa8" +
    "\001\002\000\062\005\031\011\107\015\111\020\063\027" +
    "\004\043\065\044\047\045\100\046\043\051\066\052\020" +
    "\054\106\055\024\056\050\057\112\060\075\062\013\063" +
    "\035\070\025\071\006\072\005\073\040\074\076\075\117" +
    "\001\002\000\062\005\031\011\107\015\111\020\063\027" +
    "\004\043\065\044\047\045\100\046\043\051\066\052\020" +
    "\054\106\055\024\056\050\057\112\060\075\062\013\063" +
    "\035\070\025\071\006\072\005\073\040\074\076\075\117" +
    "\001\002\000\046\006\uffd5\012\uffd5\013\uffd5\014\uffd5\017" +
    "\174\020\175\025\uffd5\026\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\065\uffd5\066" +
    "\uffd5\001\002\000\062\005\031\011\107\015\111\020\063" +
    "\027\004\043\065\044\047\045\100\046\043\051\066\052" +
    "\020\054\106\055\024\056\050\057\112\060\075\062\013" +
    "\063\035\070\025\071\006\072\005\073\040\074\076\075" +
    "\117\001\002\000\062\005\031\011\107\015\111\020\063" +
    "\027\004\043\065\044\047\045\100\046\043\051\066\052" +
    "\020\054\106\055\024\056\050\057\112\060\075\062\013" +
    "\063\035\070\025\071\006\072\005\073\040\074\076\075" +
    "\117\001\002\000\054\006\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\017\uffd2\020\uffd2\021\200\022\201\023\177\025\uffd2\026" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\040\uffd2\041\uffd2\065\uffd2\066\uffd2\001\002\000\062\005" +
    "\031\011\107\015\111\020\063\027\004\043\065\044\047" +
    "\045\100\046\043\051\066\052\020\054\106\055\024\056" +
    "\050\057\112\060\075\062\013\063\035\070\025\071\006" +
    "\072\005\073\040\074\076\075\117\001\002\000\062\005" +
    "\031\011\107\015\111\020\063\027\004\043\065\044\047" +
    "\045\100\046\043\051\066\052\020\054\106\055\024\056" +
    "\050\057\112\060\075\062\013\063\035\070\025\071\006" +
    "\072\005\073\040\074\076\075\117\001\002\000\062\005" +
    "\031\011\107\015\111\020\063\027\004\043\065\044\047" +
    "\045\100\046\043\051\066\052\020\054\106\055\024\056" +
    "\050\057\112\060\075\062\013\063\035\070\025\071\006" +
    "\072\005\073\040\074\076\075\117\001\002\000\054\006" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\025\uffcf\026\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\065\uffcf" +
    "\066\uffcf\001\002\000\054\006\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0" +
    "\026\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\065\uffd0\066\uffd0\001\002\000\054" +
    "\006\uffce\012\uffce\013\uffce\014\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\025\uffce\026\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\040\uffce\041\uffce\065" +
    "\uffce\066\uffce\001\002\000\054\006\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\017\uffd3\020\uffd3\021\200\022\201\023\177\025" +
    "\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\040\uffd3\041\uffd3\065\uffd3\066\uffd3\001\002\000" +
    "\046\006\uffd6\012\uffd6\013\uffd6\014\uffd6\017\174\020\175" +
    "\025\uffd6\026\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\041\uffd6\065\uffd6\066\uffd6\001\002" +
    "\000\062\005\031\011\107\015\111\020\063\027\004\043" +
    "\065\044\047\045\100\046\043\051\066\052\020\054\106" +
    "\055\024\056\050\057\112\060\075\062\013\063\035\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\062\005\031\011\107\015\111\020\063\027\004\043" +
    "\065\044\047\045\100\046\043\051\066\052\020\054\106" +
    "\055\024\056\050\057\112\060\075\062\013\063\035\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\062\005\031\011\107\015\111\020\063\027\004\043" +
    "\065\044\047\045\100\046\043\051\066\052\020\054\106" +
    "\055\024\056\050\057\112\060\075\062\013\063\035\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\062\005\031\011\107\015\111\020\063\027\004\043" +
    "\065\044\047\045\100\046\043\051\066\052\020\054\106" +
    "\055\024\056\050\057\112\060\075\062\013\063\035\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\062\005\031\011\107\015\111\020\063\027\004\043" +
    "\065\044\047\045\100\046\043\051\066\052\020\054\106" +
    "\055\024\056\050\057\112\060\075\062\013\063\035\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\062\005\031\011\107\015\111\020\063\027\004\043" +
    "\065\044\047\045\100\046\043\051\066\052\020\054\106" +
    "\055\024\056\050\057\112\060\075\062\013\063\035\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\042\006\uffd8\012\uffd8\013\uffd8\014\uffd8\025\171\026" +
    "\172\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\040\uffd8\041\uffd8\065\uffd8\066\uffd8\001\002\000\042\006" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\025\171\026\172\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041" +
    "\uffd9\065\uffd9\066\uffd9\001\002\000\042\006\uffda\012\uffda" +
    "\013\uffda\014\uffda\025\171\026\172\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\065\uffda" +
    "\066\uffda\001\002\000\042\006\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\025\171\026\172\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\040\uffdc\041\uffdc\065\uffdc\066\uffdc\001" +
    "\002\000\042\006\uffdb\012\uffdb\013\uffdb\014\uffdb\025\171" +
    "\026\172\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\040\uffdb\041\uffdb\065\uffdb\066\uffdb\001\002\000\042" +
    "\006\uffdd\012\uffdd\013\uffdd\014\uffdd\025\171\026\172\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd" +
    "\041\uffdd\065\uffdd\066\uffdd\001\002\000\102\005\031\007" +
    "\027\011\107\015\111\020\063\027\004\030\110\037\033" +
    "\043\065\044\047\045\100\046\043\047\057\050\041\051" +
    "\066\052\020\053\036\054\106\055\024\056\050\057\112" +
    "\060\075\061\034\062\013\063\035\064\067\070\025\071" +
    "\006\072\005\073\040\074\076\075\117\001\002\000\004" +
    "\006\225\001\002\000\056\006\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\040\uffaa\041\uffaa\065\uffaa\066\uffaa\001\002" +
    "\000\064\005\031\011\107\015\111\020\063\027\004\037" +
    "\033\043\065\044\047\045\100\046\043\051\066\052\020" +
    "\054\106\055\024\056\050\057\112\060\075\062\013\063" +
    "\035\070\025\071\006\072\005\073\040\074\076\075\117" +
    "\001\002\000\022\006\uffe3\012\uffe3\013\uffe3\014\uffe3\040" +
    "\230\041\uffe3\065\uffe3\066\uffe3\001\002\000\064\005\031" +
    "\011\107\015\111\020\063\027\004\037\033\043\065\044" +
    "\047\045\100\046\043\051\066\052\020\054\106\055\024" +
    "\056\050\057\112\060\075\062\013\063\035\070\025\071" +
    "\006\072\005\073\040\074\076\075\117\001\002\000\022" +
    "\006\uffe1\012\uffe1\013\uffe1\014\uffe1\040\uffe1\041\uffe1\065" +
    "\uffe1\066\uffe1\001\002\000\102\005\031\007\027\011\107" +
    "\015\111\020\063\027\004\030\110\037\033\043\065\044" +
    "\047\045\100\046\043\047\057\050\041\051\066\052\020" +
    "\053\036\054\106\055\024\056\050\057\112\060\075\061" +
    "\034\062\013\063\035\064\067\070\025\071\006\072\005" +
    "\073\040\074\076\075\117\001\002\000\004\006\234\001" +
    "\002\000\056\006\uff9b\012\uff9b\013\uff9b\014\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\040\uff9b\041\uff9b\065\uff9b\066\uff9b\001\002\000\104\005" +
    "\031\007\027\011\107\013\uff92\015\111\020\063\027\004" +
    "\030\110\037\033\043\065\044\047\045\100\046\043\047" +
    "\057\050\041\051\066\052\020\053\036\054\106\055\024" +
    "\056\050\057\112\060\075\061\034\062\013\063\035\064" +
    "\067\070\025\071\006\072\005\073\040\074\076\075\117" +
    "\001\002\000\004\013\ufffb\001\002\000\004\066\240\001" +
    "\002\000\102\005\031\007\027\011\107\015\111\020\063" +
    "\027\004\030\110\037\033\043\065\044\047\045\100\046" +
    "\043\047\057\050\041\051\066\052\020\053\036\054\106" +
    "\055\024\056\050\057\112\060\075\061\034\062\013\063" +
    "\035\064\067\070\025\071\006\072\005\073\040\074\076" +
    "\075\117\001\002\000\004\065\242\001\002\000\102\005" +
    "\031\007\027\011\107\015\111\020\063\027\004\030\110" +
    "\037\033\043\065\044\047\045\100\046\043\047\057\050" +
    "\041\051\066\052\020\053\036\054\106\055\024\056\050" +
    "\057\112\060\075\061\034\062\013\063\035\064\067\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\016\006\uff94\012\uff94\013\uff94\014\uff94\065\uff94\066" +
    "\uff94\001\002\000\016\006\uff93\012\uff93\013\uff93\014\uff93" +
    "\065\uff93\066\uff93\001\002\000\104\005\031\006\uff92\007" +
    "\027\011\107\015\111\020\063\027\004\030\110\037\033" +
    "\043\065\044\047\045\100\046\043\047\057\050\041\051" +
    "\066\052\020\053\036\054\106\055\024\056\050\057\112" +
    "\060\075\061\034\062\013\063\035\064\067\070\025\071" +
    "\006\072\005\073\040\074\076\075\117\001\002\000\004" +
    "\006\247\001\002\000\060\004\uffa3\006\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\040\uffa3\041\uffa3\065\uffa3\066\uffa3" +
    "\001\002\000\102\005\031\007\027\011\107\015\111\020" +
    "\063\027\004\030\110\037\033\043\065\044\047\045\100" +
    "\046\043\047\057\050\041\051\066\052\020\053\036\054" +
    "\106\055\024\056\050\057\112\060\075\061\034\062\013" +
    "\063\035\064\067\070\025\071\006\072\005\073\040\074" +
    "\076\075\117\001\002\000\004\014\252\001\002\000\102" +
    "\005\031\007\027\011\107\015\111\020\063\027\004\030" +
    "\110\037\033\043\065\044\047\045\100\046\043\047\057" +
    "\050\041\051\066\052\020\053\036\054\106\055\024\056" +
    "\050\057\112\060\075\061\034\062\013\063\035\064\067" +
    "\070\025\071\006\072\005\073\040\074\076\075\117\001" +
    "\002\000\004\006\254\001\002\000\056\006\uffac\012\uffac" +
    "\013\uffac\014\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\040\uffac\041\uffac\065\uffac\066" +
    "\uffac\001\002\000\110\002\ufffc\005\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\015\ufffc\020\ufffc\027\ufffc\030\ufffc\037\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\001\002\000" +
    "\056\006\uffc7\012\uffc7\013\uffc7\014\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7" +
    "\041\uffc7\065\uffc7\066\uffc7\001\002\000\004\002\000\001" +
    "\002\000\102\005\031\007\027\011\107\015\111\020\063" +
    "\027\004\030\110\037\033\043\065\044\047\045\100\046" +
    "\043\047\057\050\041\051\066\052\020\053\036\054\106" +
    "\055\024\056\050\057\112\060\075\061\034\062\013\063" +
    "\035\064\067\070\025\071\006\072\005\073\040\074\076" +
    "\075\117\001\002\000\004\006\262\001\002\000\016\006" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\065\ufffa\066\ufffa\001\002" +
    "\000\110\002\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd\015" +
    "\ufffd\020\ufffd\027\ufffd\030\ufffd\037\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\070\ufffd\071\ufffd\072" +
    "\ufffd\073\ufffd\074\ufffd\075\ufffd\001\002\000\110\002\uffff" +
    "\005\uffff\007\uffff\010\uffff\011\uffff\015\uffff\020\uffff\027" +
    "\uffff\030\uffff\037\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\063\uffff\064\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\001\002\000\010\006\uffe8\016\uffe8\042\uffe8" +
    "\001\002\000\004\075\270\001\002\000\010\006\uffe5\016" +
    "\uffe5\042\uffe5\001\002\000\012\006\uff92\014\266\016\uff92" +
    "\042\uff92\001\002\000\010\006\uffe6\016\uffe6\042\uffe6\001" +
    "\002\000\102\005\031\007\027\011\107\015\111\020\063" +
    "\027\004\030\110\037\033\043\065\044\047\045\100\046" +
    "\043\047\057\050\041\051\066\052\020\053\036\054\106" +
    "\055\024\056\050\057\112\060\075\061\034\062\013\063" +
    "\035\064\067\070\025\071\006\072\005\073\040\074\076" +
    "\075\117\001\002\000\004\014\274\001\002\000\102\005" +
    "\031\007\027\011\107\015\111\020\063\027\004\030\110" +
    "\037\033\043\065\044\047\045\100\046\043\047\057\050" +
    "\041\051\066\052\020\053\036\054\106\055\024\056\050" +
    "\057\112\060\075\061\034\062\013\063\035\064\067\070" +
    "\025\071\006\072\005\073\040\074\076\075\117\001\002" +
    "\000\004\006\276\001\002\000\056\006\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\040\uff9f\041\uff9f\065\uff9f\066\uff9f" +
    "\001\002\000\102\005\031\007\027\011\107\015\111\020" +
    "\063\027\004\030\110\037\033\043\065\044\047\045\100" +
    "\046\043\047\057\050\041\051\066\052\020\053\036\054" +
    "\106\055\024\056\050\057\112\060\075\061\034\062\013" +
    "\063\035\064\067\070\025\071\006\072\005\073\040\074" +
    "\076\075\117\001\002\000\004\006\301\001\002\000\056" +
    "\006\uffab\012\uffab\013\uffab\014\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\040\uffab\041" +
    "\uffab\065\uffab\066\uffab\001\002\000\102\005\031\007\027" +
    "\011\107\015\111\020\063\027\004\030\110\037\033\043" +
    "\065\044\047\045\100\046\043\047\057\050\041\051\066" +
    "\052\020\053\036\054\106\055\024\056\050\057\112\060" +
    "\075\061\034\062\013\063\035\064\067\070\025\071\006" +
    "\072\005\073\040\074\076\075\117\001\002\000\004\006" +
    "\304\001\002\000\056\006\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\040\uffa9\041\uffa9\065\uffa9\066\uffa9\001\002\000" +
    "\102\005\031\007\027\011\107\015\111\020\063\027\004" +
    "\030\110\037\033\043\065\044\047\045\100\046\043\047" +
    "\057\050\041\051\066\052\020\053\036\054\106\055\024" +
    "\056\050\057\112\060\075\061\034\062\013\063\035\064" +
    "\067\070\025\071\006\072\005\073\040\074\076\075\117" +
    "\001\002\000\004\006\307\001\002\000\016\006\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\065\ufff9\066\ufff9\001\002\000\010" +
    "\006\uff92\016\uff92\075\314\001\002\000\102\005\031\007" +
    "\027\011\107\015\111\020\063\027\004\030\110\037\033" +
    "\043\065\044\047\045\100\046\043\047\057\050\041\051" +
    "\066\052\020\053\036\054\106\055\024\056\050\057\112" +
    "\060\075\061\034\062\013\063\035\064\067\070\025\071" +
    "\006\072\005\073\040\074\076\075\117\001\002\000\016" +
    "\006\uffe9\012\uffe9\013\uffe9\014\uffe9\065\uffe9\066\uffe9\001" +
    "\002\000\006\006\315\016\316\001\002\000\010\006\uff92" +
    "\014\266\016\uff92\001\002\000\102\005\031\007\027\011" +
    "\107\015\111\020\063\027\004\030\110\037\033\043\065" +
    "\044\047\045\100\046\043\047\057\050\041\051\066\052" +
    "\020\053\036\054\106\055\024\056\050\057\112\060\075" +
    "\061\034\062\013\063\035\064\067\070\025\071\006\072" +
    "\005\073\040\074\076\075\117\001\002\000\004\075\317" +
    "\001\002\000\004\006\320\001\002\000\102\005\031\007" +
    "\027\011\107\015\111\020\063\027\004\030\110\037\033" +
    "\043\065\044\047\045\100\046\043\047\057\050\041\051" +
    "\066\052\020\053\036\054\106\055\024\056\050\057\112" +
    "\060\075\061\034\062\013\063\035\064\067\070\025\071" +
    "\006\072\005\073\040\074\076\075\117\001\002\000\016" +
    "\006\uffea\012\uffea\013\uffea\014\uffea\065\uffea\066\uffea\001" +
    "\002\000\016\006\uffeb\012\uffeb\013\uffeb\014\uffeb\065\uffeb" +
    "\066\uffeb\001\002\000\004\006\324\001\002\000\056\006" +
    "\uff95\012\uff95\013\uff95\014\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\040\uff95\041\uff95" +
    "\065\uff95\066\uff95\001\002\000\102\005\031\007\027\011" +
    "\107\015\111\020\063\027\004\030\110\037\033\043\065" +
    "\044\047\045\100\046\043\047\057\050\041\051\066\052" +
    "\020\053\036\054\106\055\024\056\050\057\112\060\075" +
    "\061\034\062\013\063\035\064\067\070\025\071\006\072" +
    "\005\073\040\074\076\075\117\001\002\000\016\006\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\065\uff9e\066\uff9e\001\002\000" +
    "\036\006\uffdf\012\uffdf\013\uffdf\014\uffdf\031\207\032\211" +
    "\033\210\034\212\035\213\036\214\040\uffdf\041\uffdf\065" +
    "\uffdf\066\uffdf\001\002\000\004\006\331\001\002\000\056" +
    "\006\uffbf\012\uffbf\013\uffbf\014\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\041" +
    "\uffbf\065\uffbf\066\uffbf\001\002\000\012\011\107\051\066" +
    "\052\020\075\334\001\002\000\056\006\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\040\uff9a\041\uff9a\065\uff9a\066\uff9a" +
    "\001\002\000\056\006\uff98\012\uff98\013\uff98\014\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\040\uff98\041\uff98\065\uff98\066\uff98\001\002\000\106" +
    "\005\031\007\027\010\336\011\107\015\111\020\063\027" +
    "\004\030\110\037\033\042\uff92\043\065\044\047\045\100" +
    "\046\043\047\057\050\041\051\066\052\020\053\036\054" +
    "\106\055\024\056\050\057\112\060\075\061\034\062\013" +
    "\063\035\064\067\070\025\071\006\072\005\073\040\074" +
    "\076\075\052\001\002\000\016\006\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\065\ufff5\066\ufff5\001\002\000\102\005\031\007" +
    "\027\011\107\015\111\020\063\027\004\030\110\037\033" +
    "\043\065\044\047\045\100\046\043\047\057\050\041\051" +
    "\066\052\020\053\036\054\106\055\024\056\050\057\112" +
    "\060\075\061\034\062\013\063\035\064\067\070\025\071" +
    "\006\072\005\073\040\074\076\075\117\001\002\000\004" +
    "\014\341\001\002\000\102\005\031\007\027\011\107\015" +
    "\111\020\063\027\004\030\110\037\033\043\065\044\047" +
    "\045\100\046\043\047\057\050\041\051\066\052\020\053" +
    "\036\054\106\055\024\056\050\057\112\060\075\061\034" +
    "\062\013\063\035\064\067\070\025\071\006\072\005\073" +
    "\040\074\076\075\117\001\002\000\004\006\343\001\002" +
    "\000\056\006\uffa0\012\uffa0\013\uffa0\014\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\040" +
    "\uffa0\041\uffa0\065\uffa0\066\uffa0\001\002\000\004\006\345" +
    "\001\002\000\056\006\uff96\012\uff96\013\uff96\014\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\040\uff96\041\uff96\065\uff96\066\uff96\001\002\000\060" +
    "\005\031\011\107\015\111\020\063\043\065\044\047\045" +
    "\100\046\043\051\066\052\020\054\106\055\024\056\050" +
    "\057\112\060\075\062\013\063\035\070\025\071\006\072" +
    "\005\073\040\074\076\075\117\001\002\000\056\006\uffca" +
    "\012\uffca\013\uffca\014\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\065" +
    "\uffca\066\uffca\001\002\000\056\006\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\346\025\uffcc\026\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\040\uffcc\041\uffcc\065\uffcc\066\uffcc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\124\002\061\003\053\004\010\005\054\006" +
    "\016\007\063\010\070\014\057\015\025\016\013\017\052" +
    "\020\007\021\041\022\027\023\031\024\072\026\021\031" +
    "\076\032\014\033\044\034\100\035\103\036\015\037\067" +
    "\040\043\041\011\042\020\043\104\044\112\045\055\046" +
    "\006\047\073\050\102\051\045\052\036\053\101\054\050" +
    "\055\113\056\022\060\060\061\071\001\001\000\054\014" +
    "\057\015\025\016\013\017\052\020\007\021\041\022\027" +
    "\026\021\041\347\042\020\043\104\044\112\045\055\046" +
    "\006\047\073\050\102\051\045\052\036\054\050\055\113" +
    "\060\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\122" +
    "\003\334\004\010\005\054\006\016\007\063\010\070\014" +
    "\057\015\025\016\013\017\052\020\007\021\041\022\027" +
    "\023\031\024\072\026\021\031\076\032\014\033\044\034" +
    "\100\035\103\036\015\037\067\040\043\041\011\042\020" +
    "\043\104\044\112\045\055\046\006\047\073\050\102\051" +
    "\045\052\036\053\101\054\050\055\113\056\022\060\060" +
    "\061\071\001\001\000\002\001\001\000\110\006\016\007" +
    "\327\010\070\014\057\015\025\016\013\017\052\020\007" +
    "\021\041\022\027\023\031\026\021\031\076\032\014\033" +
    "\044\034\100\035\103\036\015\037\067\040\043\041\011" +
    "\042\020\043\104\044\112\045\055\046\006\047\073\050" +
    "\102\051\045\052\036\053\101\054\050\055\113\056\022" +
    "\060\060\001\001\000\002\001\001\000\066\014\057\015" +
    "\025\016\013\017\052\020\007\021\041\022\027\026\021" +
    "\034\326\035\103\036\015\037\067\040\043\041\011\042" +
    "\020\043\104\044\112\045\055\046\006\047\073\050\102" +
    "\051\045\052\036\054\050\055\113\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\264\061\266\001\001\000\002" +
    "\001\001\000\120\004\263\005\054\006\016\007\063\010" +
    "\070\014\057\015\025\016\013\017\052\020\007\021\041" +
    "\022\027\023\031\024\072\026\021\031\076\032\014\033" +
    "\044\034\100\035\103\036\015\037\067\040\043\041\011" +
    "\042\020\043\104\044\112\045\055\046\006\047\073\050" +
    "\102\051\045\052\036\053\101\054\050\055\113\056\022" +
    "\060\060\061\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\014\057\015\025\016\013\017" +
    "\052\020\007\021\041\022\027\026\021\043\255\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\054" +
    "\050\055\113\060\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\110\006\016\007\236\010" +
    "\070\014\057\015\025\016\013\017\052\020\007\021\041" +
    "\022\027\023\031\026\021\031\076\032\014\033\044\034" +
    "\100\035\103\036\015\037\067\040\043\041\011\042\020" +
    "\043\104\044\112\045\055\046\006\047\073\050\102\051" +
    "\045\052\036\053\101\054\050\055\113\056\022\060\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\114\006" +
    "\016\007\122\010\070\014\057\015\025\016\013\017\052" +
    "\020\007\021\041\022\027\023\031\026\021\027\157\031" +
    "\076\032\014\033\044\034\100\035\103\036\015\037\067" +
    "\040\043\041\011\042\020\043\104\044\112\045\055\046" +
    "\006\047\073\050\102\051\045\052\036\053\101\054\050" +
    "\055\113\056\022\060\060\061\121\001\001\000\002\001" +
    "\001\000\050\014\057\015\025\016\013\017\052\020\007" +
    "\021\041\022\027\026\021\043\140\044\112\045\055\046" +
    "\006\047\073\050\102\051\045\052\036\054\050\055\113" +
    "\060\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\110\006\016\007\115\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\132\001\001" +
    "\000\114\006\016\007\122\010\070\014\057\015\025\016" +
    "\013\017\052\020\007\021\041\022\027\023\031\026\021" +
    "\027\123\031\076\032\014\033\044\034\100\035\103\036" +
    "\015\037\067\040\043\041\011\042\020\043\104\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\053" +
    "\101\054\050\055\113\056\022\060\060\061\121\001\001" +
    "\000\002\001\001\000\006\030\126\061\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\110\006\016\007\130" +
    "\010\070\014\057\015\025\016\013\017\052\020\007\021" +
    "\041\022\027\023\031\026\021\031\076\032\014\033\044" +
    "\034\100\035\103\036\015\037\067\040\043\041\011\042" +
    "\020\043\104\044\112\045\055\046\006\047\073\050\102" +
    "\051\045\052\036\053\101\054\050\055\113\056\022\060" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\131\061\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\110\006\016\007\136\010\070" +
    "\014\057\015\025\016\013\017\052\020\007\021\041\022" +
    "\027\023\031\026\021\031\076\032\014\033\044\034\100" +
    "\035\103\036\015\037\067\040\043\041\011\042\020\043" +
    "\104\044\112\045\055\046\006\047\073\050\102\051\045" +
    "\052\036\053\101\054\050\055\113\056\022\060\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\144\013\143\061\142\001" +
    "\001\000\002\001\001\000\006\012\154\061\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\110\006\016\007" +
    "\147\010\070\014\057\015\025\016\013\017\052\020\007" +
    "\021\041\022\027\023\031\026\021\031\076\032\014\033" +
    "\044\034\100\035\103\036\015\037\067\040\043\041\011" +
    "\042\020\043\104\044\112\045\055\046\006\047\073\050" +
    "\102\051\045\052\036\053\101\054\050\055\113\056\022" +
    "\060\060\001\001\000\002\001\001\000\110\006\016\007" +
    "\151\010\070\014\057\015\025\016\013\017\052\020\007" +
    "\021\041\022\027\023\031\026\021\031\076\032\014\033" +
    "\044\034\100\035\103\036\015\037\067\040\043\041\011" +
    "\042\020\043\104\044\112\045\055\046\006\047\073\050" +
    "\102\051\045\052\036\053\101\054\050\055\113\056\022" +
    "\060\060\001\001\000\002\001\001\000\004\013\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\156" +
    "\061\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\110\006\016\007\162\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\110\006\016\007\164\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\110\006\016\007\166\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\014\057\015\025" +
    "\016\013\017\052\020\007\021\041\022\027\026\021\036" +
    "\205\037\067\040\043\041\011\042\020\043\104\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\054" +
    "\050\055\113\060\060\001\001\000\062\014\057\015\025" +
    "\016\013\017\052\020\007\021\041\022\027\026\021\036" +
    "\172\037\067\040\043\041\011\042\020\043\104\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\054" +
    "\050\055\113\060\060\001\001\000\002\001\001\000\060" +
    "\014\057\015\025\016\013\017\052\020\007\021\041\022" +
    "\027\026\021\037\204\040\043\041\011\042\020\043\104" +
    "\044\112\045\055\046\006\047\073\050\102\051\045\052" +
    "\036\054\050\055\113\060\060\001\001\000\060\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\026" +
    "\021\037\175\040\043\041\011\042\020\043\104\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\054" +
    "\050\055\113\060\060\001\001\000\002\001\001\000\056" +
    "\014\057\015\025\016\013\017\052\020\007\021\041\022" +
    "\027\026\021\040\203\041\011\042\020\043\104\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\054" +
    "\050\055\113\060\060\001\001\000\056\014\057\015\025" +
    "\016\013\017\052\020\007\021\041\022\027\026\021\040" +
    "\202\041\011\042\020\043\104\044\112\045\055\046\006" +
    "\047\073\050\102\051\045\052\036\054\050\055\113\060" +
    "\060\001\001\000\056\014\057\015\025\016\013\017\052" +
    "\020\007\021\041\022\027\026\021\040\201\041\011\042" +
    "\020\043\104\044\112\045\055\046\006\047\073\050\102" +
    "\051\045\052\036\054\050\055\113\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\014\057\015\025\016" +
    "\013\017\052\020\007\021\041\022\027\026\021\035\221" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\054\050\055\113\060\060\001\001\000\064\014\057\015" +
    "\025\016\013\017\052\020\007\021\041\022\027\026\021" +
    "\035\220\036\015\037\067\040\043\041\011\042\020\043" +
    "\104\044\112\045\055\046\006\047\073\050\102\051\045" +
    "\052\036\054\050\055\113\060\060\001\001\000\064\014" +
    "\057\015\025\016\013\017\052\020\007\021\041\022\027" +
    "\026\021\035\217\036\015\037\067\040\043\041\011\042" +
    "\020\043\104\044\112\045\055\046\006\047\073\050\102" +
    "\051\045\052\036\054\050\055\113\060\060\001\001\000" +
    "\064\014\057\015\025\016\013\017\052\020\007\021\041" +
    "\022\027\026\021\035\216\036\015\037\067\040\043\041" +
    "\011\042\020\043\104\044\112\045\055\046\006\047\073" +
    "\050\102\051\045\052\036\054\050\055\113\060\060\001" +
    "\001\000\064\014\057\015\025\016\013\017\052\020\007" +
    "\021\041\022\027\026\021\035\215\036\015\037\067\040" +
    "\043\041\011\042\020\043\104\044\112\045\055\046\006" +
    "\047\073\050\102\051\045\052\036\054\050\055\113\060" +
    "\060\001\001\000\064\014\057\015\025\016\013\017\052" +
    "\020\007\021\041\022\027\026\021\035\214\036\015\037" +
    "\067\040\043\041\011\042\020\043\104\044\112\045\055" +
    "\046\006\047\073\050\102\051\045\052\036\054\050\055" +
    "\113\060\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\110\006\016\007\223\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\014\057\015\025" +
    "\016\013\017\052\020\007\021\041\022\027\026\021\032" +
    "\226\033\044\034\100\035\103\036\015\037\067\040\043" +
    "\041\011\042\020\043\104\044\112\045\055\046\006\047" +
    "\073\050\102\051\045\052\036\054\050\055\113\060\060" +
    "\001\001\000\002\001\001\000\070\014\057\015\025\016" +
    "\013\017\052\020\007\021\041\022\027\026\021\033\230" +
    "\034\100\035\103\036\015\037\067\040\043\041\011\042" +
    "\020\043\104\044\112\045\055\046\006\047\073\050\102" +
    "\051\045\052\036\054\050\055\113\060\060\001\001\000" +
    "\002\001\001\000\110\006\016\007\232\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\006\016\007\122" +
    "\010\070\014\057\015\025\016\013\017\052\020\007\021" +
    "\041\022\027\023\031\026\021\027\235\031\076\032\014" +
    "\033\044\034\100\035\103\036\015\037\067\040\043\041" +
    "\011\042\020\043\104\044\112\045\055\046\006\047\073" +
    "\050\102\051\045\052\036\053\101\054\050\055\113\056" +
    "\022\060\060\061\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\006\016\007\240\010\070\014\057\015" +
    "\025\016\013\017\052\020\007\021\041\022\027\023\031" +
    "\026\021\031\076\032\014\033\044\034\100\035\103\036" +
    "\015\037\067\040\043\041\011\042\020\043\104\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\053" +
    "\101\054\050\055\113\056\022\060\060\001\001\000\004" +
    "\057\242\001\001\000\110\006\016\007\243\010\070\014" +
    "\057\015\025\016\013\017\052\020\007\021\041\022\027" +
    "\023\031\026\021\031\076\032\014\033\044\034\100\035" +
    "\103\036\015\037\067\040\043\041\011\042\020\043\104" +
    "\044\112\045\055\046\006\047\073\050\102\051\045\052" +
    "\036\053\101\054\050\055\113\056\022\060\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\114\006\016\007" +
    "\122\010\070\014\057\015\025\016\013\017\052\020\007" +
    "\021\041\022\027\023\031\026\021\027\245\031\076\032" +
    "\014\033\044\034\100\035\103\036\015\037\067\040\043" +
    "\041\011\042\020\043\104\044\112\045\055\046\006\047" +
    "\073\050\102\051\045\052\036\053\101\054\050\055\113" +
    "\056\022\060\060\061\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\110\006\016\007\250\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\110\006\016\007\252\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\110\006\016\007\260\010" +
    "\070\014\057\015\025\016\013\017\052\020\007\021\041" +
    "\022\027\023\031\026\021\031\076\032\014\033\044\034" +
    "\100\035\103\036\015\037\067\040\043\041\011\042\020" +
    "\043\104\044\112\045\055\046\006\047\073\050\102\051" +
    "\045\052\036\053\101\054\050\055\113\056\022\060\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\270\061\266\001\001\000" +
    "\002\001\001\000\110\006\016\007\272\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\110\006\016\007\274\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\110\006\016\007\277" +
    "\010\070\014\057\015\025\016\013\017\052\020\007\021" +
    "\041\022\027\023\031\026\021\031\076\032\014\033\044" +
    "\034\100\035\103\036\015\037\067\040\043\041\011\042" +
    "\020\043\104\044\112\045\055\046\006\047\073\050\102" +
    "\051\045\052\036\053\101\054\050\055\113\056\022\060" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\006\016\007\302\010\070\014\057\015\025\016\013\017" +
    "\052\020\007\021\041\022\027\023\031\026\021\031\076" +
    "\032\014\033\044\034\100\035\103\036\015\037\067\040" +
    "\043\041\011\042\020\043\104\044\112\045\055\046\006" +
    "\047\073\050\102\051\045\052\036\053\101\054\050\055" +
    "\113\056\022\060\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\006\016\007\305\010\070\014\057\015" +
    "\025\016\013\017\052\020\007\021\041\022\027\023\031" +
    "\026\021\031\076\032\014\033\044\034\100\035\103\036" +
    "\015\037\067\040\043\041\011\042\020\043\104\044\112" +
    "\045\055\046\006\047\073\050\102\051\045\052\036\053" +
    "\101\054\050\055\113\056\022\060\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\312\061\071\001" +
    "\001\000\110\006\016\007\311\010\070\014\057\015\025" +
    "\016\013\017\052\020\007\021\041\022\027\023\031\026" +
    "\021\031\076\032\014\033\044\034\100\035\103\036\015" +
    "\037\067\040\043\041\011\042\020\043\104\044\112\045" +
    "\055\046\006\047\073\050\102\051\045\052\036\053\101" +
    "\054\050\055\113\056\022\060\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\264\061\266\001\001" +
    "\000\110\006\016\007\321\010\070\014\057\015\025\016" +
    "\013\017\052\020\007\021\041\022\027\023\031\026\021" +
    "\031\076\032\014\033\044\034\100\035\103\036\015\037" +
    "\067\040\043\041\011\042\020\043\104\044\112\045\055" +
    "\046\006\047\073\050\102\051\045\052\036\053\101\054" +
    "\050\055\113\056\022\060\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\110\006\016\007\320\010\070\014" +
    "\057\015\025\016\013\017\052\020\007\021\041\022\027" +
    "\023\031\026\021\031\076\032\014\033\044\034\100\035" +
    "\103\036\015\037\067\040\043\041\011\042\020\043\104" +
    "\044\112\045\055\046\006\047\073\050\102\051\045\052" +
    "\036\053\101\054\050\055\113\056\022\060\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\110\006\016\007\325\010\070\014\057" +
    "\015\025\016\013\017\052\020\007\021\041\022\027\023" +
    "\031\026\021\031\076\032\014\033\044\034\100\035\103" +
    "\036\015\037\067\040\043\041\011\042\020\043\104\044" +
    "\112\045\055\046\006\047\073\050\102\051\045\052\036" +
    "\053\101\054\050\055\113\056\022\060\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\120\004\263\005\054\006\016\007\063" +
    "\010\070\014\057\015\025\016\013\017\052\020\007\021" +
    "\041\022\027\023\031\024\072\026\021\031\076\032\014" +
    "\033\044\034\100\035\103\036\015\037\067\040\043\041" +
    "\011\042\020\043\104\044\112\045\055\046\006\047\073" +
    "\050\102\051\045\052\036\053\101\054\050\055\113\056" +
    "\022\060\060\061\071\001\001\000\002\001\001\000\110" +
    "\006\016\007\337\010\070\014\057\015\025\016\013\017" +
    "\052\020\007\021\041\022\027\023\031\026\021\031\076" +
    "\032\014\033\044\034\100\035\103\036\015\037\067\040" +
    "\043\041\011\042\020\043\104\044\112\045\055\046\006" +
    "\047\073\050\102\051\045\052\036\053\101\054\050\055" +
    "\113\056\022\060\060\001\001\000\002\001\001\000\110" +
    "\006\016\007\341\010\070\014\057\015\025\016\013\017" +
    "\052\020\007\021\041\022\027\023\031\026\021\031\076" +
    "\032\014\033\044\034\100\035\103\036\015\037\067\040" +
    "\043\041\011\042\020\043\104\044\112\045\055\046\006" +
    "\047\073\050\102\051\045\052\036\053\101\054\050\055" +
    "\113\056\022\060\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\014" +
    "\057\015\025\016\013\017\052\020\007\021\041\022\027" +
    "\026\021\042\346\043\104\044\112\045\055\046\006\047" +
    "\073\050\102\051\045\052\036\054\050\055\113\060\060" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //  This is no longer needed for CUP v0.11
		// Create a lexer that reads from
		// supplied input stream or standard input
		// if (in == null)
		//    in = System.in;
		// lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
		    	lexer.getColumn() +
		    	": Unrecognised token <" +
		    	lexer.getText() + ">";
		    throw new SyntaxSmplException(msg, ioe);
		}
	  
    }


		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " + 
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",47, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expElse ::= ELSE expression 
            {
              Exp RESULT =null;
		int elseArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp elseArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = elseArg;
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expElse",45, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expIf ::= IF expression THEN expression expElse 
            {
              Exp RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp con = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int ifArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int ifArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp ifArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int elseArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp elseArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpIf(con, ifArg, elseArg);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expIf",44, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // readint ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpReadInt();
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("readint",43, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpRead();
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // concatList ::= VARIABLE LSTCONCAT list 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp second = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",46, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // concatList ::= list LSTCONCAT VARIABLE 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp first = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",46, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // concatList ::= VARIABLE LSTCONCAT VARIABLE 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",46, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // concatList ::= list LSTCONCAT list 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp first = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp second = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",46, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpLazy(e);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("lazy",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // call ::= CALL LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCall(p);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("call",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCall(p,l);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("call",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // def ::= DEF VARIABLE expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpDef(v,e); 
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("def",41, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // equal ::= EQUAL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpEqual(a,b);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("equal",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // eqv ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpEqv(a,b);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("eqv",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // list ::= EMPTYLIST 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // list ::= LBRACKET args RBRACKET 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // list ::= LIST LPAREN args RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // argsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // argsAux ::= COMMA expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // args ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // args ::= expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpSubStr(e1, e2, e3);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("substr",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cdr ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCdr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cdr",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // car ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCar(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("car",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // pairCheck ::= PAIRCHECK LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPairCheck(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pairCheck",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPair(e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pair",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // builtIn ::= readint 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // builtIn ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // builtIn ::= concatList 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // builtIn ::= lazy 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // builtIn ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // builtIn ::= equal 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // builtIn ::= eqv 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // builtIn ::= substr 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // builtIn ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // builtIn ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // builtIn ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // builtIn ::= pairCheck 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // builtIn ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boolVal ::= BOOL 
            {
              SmplValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		boolean blit = (boolean)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(blit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolVal",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // strVal ::= CHARACTER 
            {
              SmplValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String chlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeChar(chlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // strVal ::= STRING 
            {
              SmplValue< ? > RESULT =null;
		int strlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int strlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String strlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeStrEscaped(strlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // val ::= REAL 
            {
              SmplValue< ? > RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(rlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // val ::= INTEGER 
            {
              SmplValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= procCallExp 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpProcedureCall pc = (ExpProcedureCall)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= builtIn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= strVal 
            {
              Exp RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > sv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(sv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= boolVal 
            {
              Exp RESULT =null;
		int bvleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > bv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(bv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= val 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > n = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // posneg ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT  = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // posneg ::= MINUS factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // posneg ::= NEG factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // power ::= posneg 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // power ::= power POW posneg 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPow(p, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bitnot ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bitnot ::= BNOT power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBitWiseNot(p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= bitnot 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term MOD bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMod(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term DIV bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpDiv(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= term MUL bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMul(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // count ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // count ::= count MINUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpSub(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // count ::= count PLUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpAdd(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bitandor ::= count 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bitandor ::= bitandor BOR count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseOr(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bitandor ::= bitandor BAND count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseAnd(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relation ::= bitandor 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ao; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relation ::= relation NEQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpNeq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relation ::= relation GE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relation ::= relation LE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relation ::= relation LT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relation ::= relation GT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relation ::= relation EQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpEq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logicNot ::= relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logicNot ::= LNOT relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicNot(r); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logicAnd ::= logicNot 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logicAnd ::= logicAnd LAND logicNot 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicAnd(a, n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arithExp ::= logicAnd 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arithExp ::= arithExp LOR logicAnd 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicOr(e, a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procCallExp ::= VARIABLE LPAREN args RPAREN 
            {
              ExpProcedureCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new ExpProcedureCall(v, a);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procCallExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paramsAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		
				RESULT = new ArrayList();
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramsAux",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramsAux ::= COMMA VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				pl.add(0,v);
				RESULT = pl;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramsAux",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // params ::= empty 
            {
              ArrayList<String> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // params ::= VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			pl.add(0,v);
			RESULT = pl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procExp ::= PROC VARIABLE expression 
            {
              ExpProcedure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpProcedure(body, v);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procExp ::= PROC LPAREN params PERIOD VARIABLE RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpProcedure(ps, body, v);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procExp ::= PROC LPAREN params RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpProcedure(ps, body);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // binding ::= VARIABLE EQ expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new Binding(v, e);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtLet(bs, body);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letStmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expIf 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= def 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = body; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= procExp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpProcedure p = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= print 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtPrint p = (StmtPrint)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= letStmt 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e, '\n'); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // print ::= PRINT LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= params ASSIGN args 
            {
              StmtDefinition RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtDefinition(p, a); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtSequence(s);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				lst.add(s);
				RESULT = lst;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

