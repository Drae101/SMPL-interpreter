
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 07 01:06:06 EST 2016
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSmplException;
import smpl.values.SmplValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 07 01:06:06 EST 2016
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\005\005\000\002\006\006\000" +
    "\002\006\006\000\002\007\003\000\002\007\005\000\002" +
    "\007\003\000\002\010\006\000\002\013\005\000\002\011" +
    "\004\000\002\011\003\000\002\012\005\000\002\012\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\004\000\002\026\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\004\000\002\033\003\000\002\034\005" +
    "\000\002\034\003\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\005\000\002\037\003\000\002\037\003\000\002\041\003" +
    "\000\002\041\003\000\002\040\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\010\000\002\016\006\000\002\017" +
    "\006\000\002\020\006\000\002\022\004\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\021\006\000" +
    "\002\021\005\000\002\021\003\000\002\042\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\056\004\012\006\047\010\005\014\046\016" +
    "\016\025\026\034\033\040\037\041\015\042\010\043\013" +
    "\044\062\045\014\046\052\047\025\050\053\052\011\053" +
    "\042\054\024\055\017\056\057\057\050\001\002\000\004" +
    "\002\221\001\002\000\054\004\012\006\047\010\005\011" +
    "\uffb5\014\046\016\016\025\026\034\033\040\037\041\015" +
    "\042\010\043\013\046\052\047\025\050\053\052\011\053" +
    "\042\054\024\055\017\056\057\057\066\001\002\000\060" +
    "\002\001\004\012\006\047\010\005\014\046\016\016\025" +
    "\026\034\033\040\037\041\015\042\010\043\013\044\062" +
    "\045\014\046\052\047\025\050\053\052\011\053\042\054" +
    "\024\055\017\056\057\057\050\001\002\000\004\012\216" +
    "\001\002\000\004\004\213\001\002\000\054\005\uffca\011" +
    "\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\051\uffca" +
    "\001\002\000\052\004\012\006\047\010\005\014\046\016" +
    "\016\025\026\034\033\040\037\041\015\042\010\043\013" +
    "\046\052\047\025\050\053\052\011\053\042\054\024\055" +
    "\017\056\057\057\066\001\002\000\004\004\206\001\002" +
    "\000\004\004\203\001\002\000\004\004\200\001\002\000" +
    "\036\004\012\010\005\040\037\041\015\042\010\043\013" +
    "\046\052\047\025\052\011\053\042\054\024\055\017\056" +
    "\057\057\066\001\002\000\054\005\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\051\uffc7\001\002\000" +
    "\054\005\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5" +
    "\036\uffc5\051\uffc5\001\002\000\052\005\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\051\uffd8\001\002\000\020" +
    "\005\uffeb\011\uffeb\012\uffeb\013\uffeb\035\uffeb\036\uffeb\051" +
    "\uffeb\001\002\000\020\005\uffed\011\uffed\012\uffed\013\uffed" +
    "\035\145\036\uffed\051\uffed\001\002\000\054\005\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6\051\uffc6" +
    "\001\002\000\054\005\uffb6\011\uffb6\012\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\035\uffb6\036\uffb6\051\uffb6\001\002\000\042\004\012" +
    "\010\005\014\046\016\016\040\037\041\015\042\010\043" +
    "\013\046\052\047\025\052\011\053\042\054\024\055\017" +
    "\056\057\057\066\001\002\000\040\005\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\023\164\024\165\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\051\uffe2\001" +
    "\002\000\054\005\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\035\uffc1\036\uffc1\051\uffc1\001\002\000\034\005\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\026\155\027\157\030\156\031\160" +
    "\032\161\033\162\035\uffe9\036\uffe9\051\uffe9\001\002\000" +
    "\004\012\175\001\002\000\044\004\012\010\005\014\046" +
    "\016\016\025\026\040\037\041\015\042\010\043\013\046" +
    "\052\047\025\052\011\053\042\054\024\055\017\056\057" +
    "\057\066\001\002\000\014\005\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\051\ufff7\001\002\000\054\005\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\035\uffd0\036\uffd0\051\uffd0\001\002\000" +
    "\052\005\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc" +
    "\017\100\020\101\021\077\023\uffdc\024\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc" +
    "\051\uffdc\001\002\000\004\004\147\001\002\000\054\005" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4" +
    "\051\uffc4\001\002\000\054\005\uffce\011\uffce\012\uffce\013" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\035\uffce\036\uffce\051\uffce\001\002\000\054" +
    "\005\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036" +
    "\uffc9\051\uffc9\001\002\000\054\005\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\035\uffc3\036\uffc3\051\uffc3\001\002\000" +
    "\016\005\ufff5\011\ufff5\012\ufff5\013\ufff5\036\143\051\ufff5" +
    "\001\002\000\054\005\uffc2\011\uffc2\012\uffc2\013\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\035\uffc2\036\uffc2\051\uffc2\001\002\000\036\004\012" +
    "\010\005\040\037\041\015\042\010\043\013\046\052\047" +
    "\025\052\011\053\042\054\024\055\017\056\057\057\066" +
    "\001\002\000\056\004\012\006\047\010\005\014\046\016" +
    "\016\025\026\034\033\040\037\041\015\042\010\043\013" +
    "\044\062\045\014\046\052\047\025\050\053\052\011\053" +
    "\042\054\024\055\017\056\057\057\050\001\002\000\046" +
    "\012\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\135\001\002\000" +
    "\054\005\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\051\uffcf\001\002\000\004\004\123\001\002\000" +
    "\006\051\uffb5\057\110\001\002\000\044\005\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\015\074\016\075\023\uffdf\024\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf" +
    "\036\uffdf\051\uffdf\001\002\000\054\005\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\051\uffcd\001\002" +
    "\000\054\005\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035" +
    "\uffd4\036\uffd4\051\uffd4\001\002\000\054\005\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\051\uffc8\001" +
    "\002\000\004\012\073\001\002\000\054\005\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\051\uffd1\001" +
    "\002\000\004\004\070\001\002\000\054\005\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\065\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\051\uffd6\001" +
    "\002\000\062\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\014\ufffe\016\ufffe\025\ufffe\034\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\001" +
    "\002\000\042\004\012\010\005\014\046\016\016\040\037" +
    "\041\015\042\010\043\013\046\052\047\025\052\011\053" +
    "\042\054\024\055\017\056\057\057\066\001\002\000\054" +
    "\005\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036" +
    "\uffcc\051\uffcc\001\002\000\054\005\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\036\uffd5\051\uffd5\001\002\000" +
    "\052\004\012\006\047\010\005\014\046\016\016\025\026" +
    "\034\033\040\037\041\015\042\010\043\013\046\052\047" +
    "\025\050\053\052\011\053\042\054\024\055\017\056\057" +
    "\057\066\001\002\000\004\005\072\001\002\000\004\012" +
    "\ufff9\001\002\000\062\002\ufffc\004\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\014\ufffc\016\ufffc\025\ufffc\034\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\001\002\000\044\004\012\010\005\014\046\016\016" +
    "\025\026\040\037\041\015\042\010\043\013\046\052\047" +
    "\025\052\011\053\042\054\024\055\017\056\057\057\066" +
    "\001\002\000\044\004\012\010\005\014\046\016\016\025" +
    "\026\040\037\041\015\042\010\043\013\046\052\047\025" +
    "\052\011\053\042\054\024\055\017\056\057\057\066\001" +
    "\002\000\052\005\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd" +
    "\016\uffdd\017\100\020\101\021\077\023\uffdd\024\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd" +
    "\036\uffdd\051\uffdd\001\002\000\044\004\012\010\005\014" +
    "\046\016\016\025\026\040\037\041\015\042\010\043\013" +
    "\046\052\047\025\052\011\053\042\054\024\055\017\056" +
    "\057\057\066\001\002\000\044\004\012\010\005\014\046" +
    "\016\016\025\026\040\037\041\015\042\010\043\013\046" +
    "\052\047\025\052\011\053\042\054\024\055\017\056\057" +
    "\057\066\001\002\000\044\004\012\010\005\014\046\016" +
    "\016\025\026\040\037\041\015\042\010\043\013\046\052" +
    "\047\025\052\011\053\042\054\024\055\017\056\057\057" +
    "\066\001\002\000\052\005\uffda\011\uffda\012\uffda\013\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\035\uffda\036\uffda\051\uffda\001\002\000\052\005\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\051\uffdb\001\002" +
    "\000\052\005\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036" +
    "\uffd9\051\uffd9\001\002\000\052\005\uffde\011\uffde\012\uffde" +
    "\013\uffde\015\uffde\016\uffde\017\100\020\101\021\077\023" +
    "\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\035\uffde\036\uffde\051\uffde\001\002\000\004\051" +
    "\ufff1\001\002\000\006\013\116\051\uffb5\001\002\000\004" +
    "\026\114\001\002\000\004\051\112\001\002\000\052\004" +
    "\012\006\047\010\005\014\046\016\016\025\026\034\033" +
    "\040\037\041\015\042\010\043\013\046\052\047\025\050" +
    "\053\052\011\053\042\054\024\055\017\056\057\057\066" +
    "\001\002\000\014\005\ufff4\011\ufff4\012\ufff4\013\ufff4\051" +
    "\ufff4\001\002\000\052\004\012\006\047\010\005\014\046" +
    "\016\016\025\026\034\033\040\037\041\015\042\010\043" +
    "\013\046\052\047\025\050\053\052\011\053\042\054\024" +
    "\055\017\056\057\057\066\001\002\000\006\013\ufff3\051" +
    "\ufff3\001\002\000\004\057\110\001\002\000\004\051\uffef" +
    "\001\002\000\004\051\ufff2\001\002\000\006\013\116\051" +
    "\uffb5\001\002\000\004\051\ufff0\001\002\000\054\004\012" +
    "\005\uffb5\006\047\010\005\014\046\016\016\025\026\034" +
    "\033\040\037\041\015\042\010\043\013\046\052\047\025" +
    "\050\053\052\011\053\042\054\024\055\017\056\057\057" +
    "\066\001\002\000\006\005\uffbb\011\uffbb\001\002\000\010" +
    "\005\uffb5\011\uffb5\013\130\001\002\000\004\005\127\001" +
    "\002\000\054\005\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\035\uffb8\036\uffb8\051\uffb8\001\002\000\052\004\012\006" +
    "\047\010\005\014\046\016\016\025\026\034\033\040\037" +
    "\041\015\042\010\043\013\046\052\047\025\050\053\052" +
    "\011\053\042\054\024\055\017\056\057\057\066\001\002" +
    "\000\006\005\uffbc\011\uffbc\001\002\000\006\005\uffb9\011" +
    "\uffb9\001\002\000\010\005\uffb5\011\uffb5\013\130\001\002" +
    "\000\006\005\uffba\011\uffba\001\002\000\052\004\012\006" +
    "\047\010\005\014\046\016\016\025\026\034\033\040\037" +
    "\041\015\042\010\043\013\046\052\047\025\050\053\052" +
    "\011\053\042\054\024\055\017\056\057\057\066\001\002" +
    "\000\004\012\ufffa\001\002\000\060\004\012\006\047\007" +
    "\140\010\005\014\046\016\016\025\026\034\033\040\037" +
    "\041\015\042\010\043\013\044\062\045\014\046\052\047" +
    "\025\050\053\052\011\053\042\054\024\055\017\056\057" +
    "\057\050\001\002\000\014\005\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\051\ufff6\001\002\000\062\002\uffff\004\uffff\006\uffff" +
    "\007\uffff\010\uffff\014\uffff\016\uffff\025\uffff\034\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\057\uffff\001\002\000\054\005\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\035\uffd3\036\uffd3\051\uffd3\001\002\000" +
    "\046\004\012\010\005\014\046\016\016\025\026\034\033" +
    "\040\037\041\015\042\010\043\013\046\052\047\025\052" +
    "\011\053\042\054\024\055\017\056\057\057\066\001\002" +
    "\000\020\005\uffee\011\uffee\012\uffee\013\uffee\035\145\036" +
    "\uffee\051\uffee\001\002\000\046\004\012\010\005\014\046" +
    "\016\016\025\026\034\033\040\037\041\015\042\010\043" +
    "\013\046\052\047\025\052\011\053\042\054\024\055\017" +
    "\056\057\057\066\001\002\000\020\005\uffec\011\uffec\012" +
    "\uffec\013\uffec\035\uffec\036\uffec\051\uffec\001\002\000\052" +
    "\004\012\006\047\010\005\014\046\016\016\025\026\034" +
    "\033\040\037\041\015\042\010\043\013\046\052\047\025" +
    "\050\053\052\011\053\042\054\024\055\017\056\057\057" +
    "\066\001\002\000\004\013\151\001\002\000\052\004\012" +
    "\006\047\010\005\014\046\016\016\025\026\034\033\040" +
    "\037\041\015\042\010\043\013\046\052\047\025\050\053" +
    "\052\011\053\042\054\024\055\017\056\057\057\066\001" +
    "\002\000\004\005\153\001\002\000\054\005\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0\051\uffc0\001" +
    "\002\000\034\005\uffea\011\uffea\012\uffea\013\uffea\026\155" +
    "\027\157\030\156\031\160\032\161\033\162\035\uffea\036" +
    "\uffea\051\uffea\001\002\000\044\004\012\010\005\014\046" +
    "\016\016\025\026\040\037\041\015\042\010\043\013\046" +
    "\052\047\025\052\011\053\042\054\024\055\017\056\057" +
    "\057\066\001\002\000\044\004\012\010\005\014\046\016" +
    "\016\025\026\040\037\041\015\042\010\043\013\046\052" +
    "\047\025\052\011\053\042\054\024\055\017\056\057\057" +
    "\066\001\002\000\044\004\012\010\005\014\046\016\016" +
    "\025\026\040\037\041\015\042\010\043\013\046\052\047" +
    "\025\052\011\053\042\054\024\055\017\056\057\057\066" +
    "\001\002\000\044\004\012\010\005\014\046\016\016\025" +
    "\026\040\037\041\015\042\010\043\013\046\052\047\025" +
    "\052\011\053\042\054\024\055\017\056\057\057\066\001" +
    "\002\000\044\004\012\010\005\014\046\016\016\025\026" +
    "\040\037\041\015\042\010\043\013\046\052\047\025\052" +
    "\011\053\042\054\024\055\017\056\057\057\066\001\002" +
    "\000\044\004\012\010\005\014\046\016\016\025\026\040" +
    "\037\041\015\042\010\043\013\046\052\047\025\052\011" +
    "\053\042\054\024\055\017\056\057\057\066\001\002\000" +
    "\040\005\uffe3\011\uffe3\012\uffe3\013\uffe3\023\164\024\165" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035" +
    "\uffe3\036\uffe3\051\uffe3\001\002\000\044\004\012\010\005" +
    "\014\046\016\016\025\026\040\037\041\015\042\010\043" +
    "\013\046\052\047\025\052\011\053\042\054\024\055\017" +
    "\056\057\057\066\001\002\000\044\004\012\010\005\014" +
    "\046\016\016\025\026\040\037\041\015\042\010\043\013" +
    "\046\052\047\025\052\011\053\042\054\024\055\017\056" +
    "\057\057\066\001\002\000\044\005\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\015\074\016\075\023\uffe0\024\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0" +
    "\051\uffe0\001\002\000\044\005\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\015\074\016\075\023\uffe1\024\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1\051" +
    "\uffe1\001\002\000\040\005\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\023\164\024\165\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\035\uffe4\036\uffe4\051\uffe4\001\002\000\040" +
    "\005\uffe5\011\uffe5\012\uffe5\013\uffe5\023\164\024\165\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\051\uffe5\001\002\000\040\005\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\023\164\024\165\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\051\uffe7\001" +
    "\002\000\040\005\uffe6\011\uffe6\012\uffe6\013\uffe6\023\164" +
    "\024\165\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\035\uffe6\036\uffe6\051\uffe6\001\002\000\040\005\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\023\164\024\165\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\036\uffe8" +
    "\051\uffe8\001\002\000\062\002\ufffb\004\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\014\ufffb\016\ufffb\025\ufffb\034\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\001\002\000\054\005\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\065" +
    "\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\035\uffd7\036\uffd7\051\uffd7\001\002\000\054" +
    "\005\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036" +
    "\uffd2\051\uffd2\001\002\000\052\004\012\006\047\010\005" +
    "\014\046\016\016\025\026\034\033\040\037\041\015\042" +
    "\010\043\013\046\052\047\025\050\053\052\011\053\042" +
    "\054\024\055\017\056\057\057\066\001\002\000\004\005" +
    "\202\001\002\000\054\005\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\035\uffbf\036\uffbf\051\uffbf\001\002\000\052\004" +
    "\012\006\047\010\005\014\046\016\016\025\026\034\033" +
    "\040\037\041\015\042\010\043\013\046\052\047\025\050" +
    "\053\052\011\053\042\054\024\055\017\056\057\057\066" +
    "\001\002\000\004\005\205\001\002\000\004\012\ufff8\001" +
    "\002\000\052\004\012\006\047\010\005\014\046\016\016" +
    "\025\026\034\033\040\037\041\015\042\010\043\013\046" +
    "\052\047\025\050\053\052\011\053\042\054\024\055\017" +
    "\056\057\057\066\001\002\000\004\005\210\001\002\000" +
    "\054\005\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd" +
    "\036\uffbd\051\uffbd\001\002\000\004\005\212\001\002\000" +
    "\054\005\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb" +
    "\036\uffcb\051\uffcb\001\002\000\052\004\012\006\047\010" +
    "\005\014\046\016\016\025\026\034\033\040\037\041\015" +
    "\042\010\043\013\046\052\047\025\050\053\052\011\053" +
    "\042\054\024\055\017\056\057\057\066\001\002\000\004" +
    "\005\215\001\002\000\054\005\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\035\uffbe\036\uffbe\051\uffbe\001\002\000\062" +
    "\002\ufffd\004\ufffd\006\ufffd\007\ufffd\010\ufffd\014\ufffd\016" +
    "\ufffd\025\ufffd\034\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002\000\004" +
    "\011\220\001\002\000\054\005\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\051\uffb7\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\070\002\003\003\005\004\063\005\006\006" +
    "\057\007\031\010\033\014\054\015\017\016\037\017\042" +
    "\020\044\021\027\024\043\025\022\026\021\027\030\030" +
    "\026\031\053\032\035\033\020\034\062\035\055\036\060" +
    "\037\034\040\050\041\040\001\001\000\002\001\001\000" +
    "\062\007\124\010\033\014\054\015\017\016\037\017\042" +
    "\020\044\021\027\022\216\024\043\025\022\026\021\027" +
    "\030\030\026\031\053\032\035\033\020\034\062\035\055" +
    "\036\060\037\034\040\050\041\040\042\123\001\001\000" +
    "\064\004\140\005\006\006\057\007\031\010\033\014\054" +
    "\015\017\016\037\017\042\020\044\021\027\024\043\025" +
    "\022\026\021\027\030\030\026\031\053\032\035\033\020" +
    "\034\062\035\055\036\060\037\034\040\050\041\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\210\010\033\014\054\015\017\016\037\017" +
    "\042\020\044\021\027\024\043\025\022\026\021\027\030" +
    "\030\026\031\053\032\035\033\020\034\062\035\055\036" +
    "\060\037\034\040\050\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\054\015" +
    "\017\016\037\017\042\020\044\021\027\036\176\037\034" +
    "\040\050\041\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\014\054\015" +
    "\017\016\037\017\042\020\044\021\027\034\175\035\055" +
    "\036\060\037\034\040\050\041\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\014\054\015\017\016\037\017\042\020\044\021" +
    "\027\027\153\030\026\031\053\032\035\033\020\034\062" +
    "\035\055\036\060\037\034\040\050\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\054\015\017\016\037\017\042\020\044\021" +
    "\027\036\141\037\034\040\050\041\040\001\001\000\066" +
    "\003\136\004\063\005\006\006\057\007\031\010\033\014" +
    "\054\015\017\016\037\017\042\020\044\021\027\024\043" +
    "\025\022\026\021\027\030\030\026\031\053\032\035\033" +
    "\020\034\062\035\055\036\060\037\034\040\050\041\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\110\013\106\042\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\054\015" +
    "\017\016\037\017\042\020\044\021\027\035\066\036\060" +
    "\037\034\040\050\041\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\007\070\010\033\014\054\015\017" +
    "\016\037\017\042\020\044\021\027\024\043\025\022\026" +
    "\021\027\030\030\026\031\053\032\035\033\020\034\062" +
    "\035\055\036\060\037\034\040\050\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\014\054\015\017\016\037\017\042\020\044\021\027\032" +
    "\104\033\020\034\062\035\055\036\060\037\034\040\050" +
    "\041\040\001\001\000\036\014\054\015\017\016\037\017" +
    "\042\020\044\021\027\032\075\033\020\034\062\035\055" +
    "\036\060\037\034\040\050\041\040\001\001\000\002\001" +
    "\001\000\034\014\054\015\017\016\037\017\042\020\044" +
    "\021\027\033\103\034\062\035\055\036\060\037\034\040" +
    "\050\041\040\001\001\000\034\014\054\015\017\016\037" +
    "\017\042\020\044\021\027\033\102\034\062\035\055\036" +
    "\060\037\034\040\050\041\040\001\001\000\034\014\054" +
    "\015\017\016\037\017\042\020\044\021\027\033\101\034" +
    "\062\035\055\036\060\037\034\040\050\041\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\117\042\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\112\010\033\014\054\015\017\016\037\017\042\020\044" +
    "\021\027\024\043\025\022\026\021\027\030\030\026\031" +
    "\053\032\035\033\020\034\062\035\055\036\060\037\034" +
    "\040\050\041\040\001\001\000\002\001\001\000\056\007" +
    "\114\010\033\014\054\015\017\016\037\017\042\020\044" +
    "\021\027\024\043\025\022\026\021\027\030\030\026\031" +
    "\053\032\035\033\020\034\062\035\055\036\060\037\034" +
    "\040\050\041\040\001\001\000\002\001\001\000\004\013" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\121\042\116\001\001\000\002\001\001\000\062\007" +
    "\124\010\033\014\054\015\017\016\037\017\042\020\044" +
    "\021\027\022\125\024\043\025\022\026\021\027\030\030" +
    "\026\031\053\032\035\033\020\034\062\035\055\036\060" +
    "\037\034\040\050\041\040\042\123\001\001\000\002\001" +
    "\001\000\006\023\130\042\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\007\132\010\033\014\054\015" +
    "\017\016\037\017\042\020\044\021\027\024\043\025\022" +
    "\026\021\027\030\030\026\031\053\032\035\033\020\034" +
    "\062\035\055\036\060\037\034\040\050\041\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\133\042" +
    "\131\001\001\000\002\001\001\000\056\007\135\010\033" +
    "\014\054\015\017\016\037\017\042\020\044\021\027\024" +
    "\043\025\022\026\021\027\030\030\026\031\053\032\035" +
    "\033\020\034\062\035\055\036\060\037\034\040\050\041" +
    "\040\001\001\000\002\001\001\000\064\004\140\005\006" +
    "\006\057\007\031\010\033\014\054\015\017\016\037\017" +
    "\042\020\044\021\027\024\043\025\022\026\021\027\030" +
    "\030\026\031\053\032\035\033\020\034\062\035\055\036" +
    "\060\037\034\040\050\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\014\054\015" +
    "\017\016\037\017\042\020\044\021\027\025\143\026\021" +
    "\027\030\030\026\031\053\032\035\033\020\034\062\035" +
    "\055\036\060\037\034\040\050\041\040\001\001\000\002" +
    "\001\001\000\046\014\054\015\017\016\037\017\042\020" +
    "\044\021\027\026\145\027\030\030\026\031\053\032\035" +
    "\033\020\034\062\035\055\036\060\037\034\040\050\041" +
    "\040\001\001\000\002\001\001\000\056\007\147\010\033" +
    "\014\054\015\017\016\037\017\042\020\044\021\027\024" +
    "\043\025\022\026\021\027\030\030\026\031\053\032\035" +
    "\033\020\034\062\035\055\036\060\037\034\040\050\041" +
    "\040\001\001\000\002\001\001\000\056\007\151\010\033" +
    "\014\054\015\017\016\037\017\042\020\044\021\027\024" +
    "\043\025\022\026\021\027\030\030\026\031\053\032\035" +
    "\033\020\034\062\035\055\036\060\037\034\040\050\041" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\014\054\015\017\016\037\017\042\020" +
    "\044\021\027\030\173\031\053\032\035\033\020\034\062" +
    "\035\055\036\060\037\034\040\050\041\040\001\001\000" +
    "\042\014\054\015\017\016\037\017\042\020\044\021\027" +
    "\030\172\031\053\032\035\033\020\034\062\035\055\036" +
    "\060\037\034\040\050\041\040\001\001\000\042\014\054" +
    "\015\017\016\037\017\042\020\044\021\027\030\171\031" +
    "\053\032\035\033\020\034\062\035\055\036\060\037\034" +
    "\040\050\041\040\001\001\000\042\014\054\015\017\016" +
    "\037\017\042\020\044\021\027\030\170\031\053\032\035" +
    "\033\020\034\062\035\055\036\060\037\034\040\050\041" +
    "\040\001\001\000\042\014\054\015\017\016\037\017\042" +
    "\020\044\021\027\030\167\031\053\032\035\033\020\034" +
    "\062\035\055\036\060\037\034\040\050\041\040\001\001" +
    "\000\042\014\054\015\017\016\037\017\042\020\044\021" +
    "\027\030\162\031\053\032\035\033\020\034\062\035\055" +
    "\036\060\037\034\040\050\041\040\001\001\000\002\001" +
    "\001\000\040\014\054\015\017\016\037\017\042\020\044" +
    "\021\027\031\166\032\035\033\020\034\062\035\055\036" +
    "\060\037\034\040\050\041\040\001\001\000\040\014\054" +
    "\015\017\016\037\017\042\020\044\021\027\031\165\032" +
    "\035\033\020\034\062\035\055\036\060\037\034\040\050" +
    "\041\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\007\200\010\033\014\054" +
    "\015\017\016\037\017\042\020\044\021\027\024\043\025" +
    "\022\026\021\027\030\030\026\031\053\032\035\033\020" +
    "\034\062\035\055\036\060\037\034\040\050\041\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\007\203" +
    "\010\033\014\054\015\017\016\037\017\042\020\044\021" +
    "\027\024\043\025\022\026\021\027\030\030\026\031\053" +
    "\032\035\033\020\034\062\035\055\036\060\037\034\040" +
    "\050\041\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\206\010\033\014\054\015\017\016\037\017" +
    "\042\020\044\021\027\024\043\025\022\026\021\027\030" +
    "\030\026\031\053\032\035\033\020\034\062\035\055\036" +
    "\060\037\034\040\050\041\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\007\213\010\033\014\054\015\017\016\037\017\042" +
    "\020\044\021\027\024\043\025\022\026\021\027\030\030" +
    "\026\031\053\032\035\033\020\034\062\035\055\036\060" +
    "\037\034\040\050\041\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //  This is no longer needed for CUP v0.11
		// Create a lexer that reads from
		// supplied input stream or standard input
		// if (in == null)
		//    in = System.in;
		// lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
		    	lexer.getColumn() +
		    	": Unrecognised token <" +
		    	lexer.getText() + ">";
		    throw new SyntaxSmplException(msg, ioe);
		}
	  
    }


		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " + 
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list ::= EMPTYLIST 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list ::= LBRACKET args RBRACKET 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list ::= LIST LPAREN args RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // argsAux ::= COMMA expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // args ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // args ::= expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cdr ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCdr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cdr",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // car ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCar(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("car",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pairCheck ::= PAIRCHECK LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPairCheck(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pairCheck",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPair(e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pair",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // builtIn ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // builtIn ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // builtIn ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // builtIn ::= pairCheck 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // builtIn ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // boolVal ::= BOOL 
            {
              SmplValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		boolean blit = (boolean)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(blit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolVal",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // strVal ::= CHARACTER 
            {
              SmplValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String chlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeChar(chlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // strVal ::= STRING 
            {
              SmplValue< ? > RESULT =null;
		int strlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int strlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String strlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeStrEscaped(strlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // val ::= REAL 
            {
              SmplValue< ? > RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(rlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // val ::= INTEGER 
            {
              SmplValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= builtIn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= strVal 
            {
              Exp RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > sv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(sv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= boolVal 
            {
              Exp RESULT =null;
		int bvleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > bv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(bv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= val 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > n = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // posneg ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT  = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // posneg ::= MINUS factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // posneg ::= NEG factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // power ::= posneg 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // power ::= power POW posneg 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPow(p, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bitnot ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bitnot ::= BNOT power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBitWiseNot(p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= bitnot 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= term MOD bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMod(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= term DIV bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpDiv(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= term MUL bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMul(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // count ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // count ::= count MINUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpSub(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // count ::= count PLUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpAdd(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bitandor ::= count 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bitandor ::= bitandor BOR count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseOr(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bitandor ::= bitandor BAND count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseAnd(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relation ::= bitandor 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ao; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relation ::= relation NEQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpNeq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relation ::= relation GE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relation ::= relation LE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // relation ::= relation LT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // relation ::= relation GT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // relation ::= relation EQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpEq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logicNot ::= relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logicNot ::= LNOT relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicNot(r); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logicAnd ::= logicNot 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logicAnd ::= logicAnd LAND logicNot 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicAnd(a, n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithExp ::= logicAnd 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithExp ::= arithExp LOR logicAnd 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicOr(e, a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // binding ::= VARIABLE EQ expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new Binding(v, e);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // letStmt ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtLet(bs, body);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letStmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = body; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= letStmt 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e, '\n'); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // print ::= PRINT LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtDefinition(v, e); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= print SEMI 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtPrint p = (StmtPrint)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtSequence(s);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				lst.add(s);
				RESULT = lst;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

