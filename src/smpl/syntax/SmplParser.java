
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 06 12:15:59 EST 2016
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSmplException;
import smpl.values.SmplValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 06 12:15:59 EST 2016
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\005\005\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\004\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\021\003\000\002\023" +
    "\003\000\002\023\003\000\002\022\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\010\000\002\011\006\000\002\012\006\000\002" +
    "\013\006\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\034\004\015\006\014\012\006\022\037\023" +
    "\027\024\022\025\023\026\034\027\035\030\033\031\010" +
    "\032\024\033\012\001\002\000\010\005\ufff8\010\ufff8\011" +
    "\ufff8\001\002\000\014\005\ufff9\010\ufff9\011\ufff9\013\105" +
    "\014\106\001\002\000\020\004\015\026\034\027\035\030" +
    "\033\031\010\032\024\033\045\001\002\000\010\005\uffe1" +
    "\010\uffe1\011\uffe1\001\002\000\024\005\uffe4\010\uffe4\011" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\001\002\000\004\010\103\001\002\000\022\010\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\101" +
    "\001\002\000\010\005\uffe0\010\uffe0\011\uffe0\001\002\000" +
    "\034\004\015\006\014\012\006\022\037\023\027\024\022" +
    "\025\023\026\034\027\035\030\033\031\010\032\024\033" +
    "\012\001\002\000\034\004\015\006\014\012\006\022\037" +
    "\023\027\024\022\025\023\026\034\027\035\030\033\031" +
    "\010\032\024\033\045\001\002\000\010\005\uffdf\010\uffdf" +
    "\011\uffdf\001\002\000\004\002\074\001\002\000\024\005" +
    "\uffef\010\uffef\011\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\001\002\000\024\005\ufff1\010\ufff1\011" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\056" +
    "\001\002\000\004\004\071\001\002\000\004\004\066\001" +
    "\002\000\024\005\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\001\002\000\004\010" +
    "\065\001\002\000\024\005\uffed\010\uffed\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\001\002\000" +
    "\004\004\062\001\002\000\024\005\uffeb\010\uffeb\011\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\001" +
    "\002\000\022\005\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5" +
    "\015\053\016\054\017\052\001\002\000\010\005\uffe2\010" +
    "\uffe2\011\uffe2\001\002\000\024\005\uffe3\010\uffe3\011\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\001" +
    "\002\000\024\005\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\001\002\000\024\005" +
    "\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\001\002\000\040\002\ufffe\004\ufffe\006" +
    "\ufffe\007\ufffe\012\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\001" +
    "\002\000\004\004\044\001\002\000\024\005\uffea\010\uffea" +
    "\011\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\001\002\000\036\002\001\004\015\006\014\012\006" +
    "\022\037\023\027\024\022\025\023\026\034\027\035\030" +
    "\033\031\010\032\024\033\012\001\002\000\024\005\uffec" +
    "\010\uffec\011\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\001\002\000\040\002\uffff\004\uffff\006\uffff" +
    "\007\uffff\012\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\001\002" +
    "\000\034\004\015\006\014\012\006\022\037\023\027\024" +
    "\022\025\023\026\034\027\035\030\033\031\010\032\024" +
    "\033\045\001\002\000\024\005\uffe9\010\uffe9\011\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\001\002" +
    "\000\004\011\047\001\002\000\034\004\015\006\014\012" +
    "\006\022\037\023\027\024\022\025\023\026\034\027\035" +
    "\030\033\031\010\032\024\033\045\001\002\000\004\005" +
    "\051\001\002\000\010\005\uffde\010\uffde\011\uffde\001\002" +
    "\000\022\004\015\012\006\026\034\027\035\030\033\031" +
    "\010\032\024\033\045\001\002\000\022\004\015\012\006" +
    "\026\034\027\035\030\033\031\010\032\024\033\045\001" +
    "\002\000\022\004\015\012\006\026\034\027\035\030\033" +
    "\031\010\032\024\033\045\001\002\000\024\005\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\056\001\002\000\022\004\015\012\006\026\034\027" +
    "\035\030\033\031\010\032\024\033\045\001\002\000\024" +
    "\005\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\001\002\000\024\005\ufff4\010\ufff4" +
    "\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\056\001\002\000\024\005\ufff2\010\ufff2\011\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\056\001\002\000" +
    "\034\004\015\006\014\012\006\022\037\023\027\024\022" +
    "\025\023\026\034\027\035\030\033\031\010\032\024\033" +
    "\045\001\002\000\004\005\064\001\002\000\010\005\uffdd" +
    "\010\uffdd\011\uffdd\001\002\000\040\002\ufffc\004\ufffc\006" +
    "\ufffc\007\ufffc\012\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\001" +
    "\002\000\034\004\015\006\014\012\006\022\037\023\027" +
    "\024\022\025\023\026\034\027\035\030\033\031\010\032" +
    "\024\033\045\001\002\000\004\005\070\001\002\000\010" +
    "\005\uffdb\010\uffdb\011\uffdb\001\002\000\034\004\015\006" +
    "\014\012\006\022\037\023\027\024\022\025\023\026\034" +
    "\027\035\030\033\031\010\032\024\033\045\001\002\000" +
    "\004\005\073\001\002\000\010\005\uffdc\010\uffdc\011\uffdc" +
    "\001\002\000\004\002\000\001\002\000\004\005\076\001" +
    "\002\000\024\005\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\001\002\000\036\004" +
    "\015\006\014\007\100\012\006\022\037\023\027\024\022" +
    "\025\023\026\034\027\035\030\033\031\010\032\024\033" +
    "\012\001\002\000\010\005\ufffa\010\ufffa\011\ufffa\001\002" +
    "\000\034\004\015\006\014\012\006\022\037\023\027\024" +
    "\022\025\023\026\034\027\035\030\033\031\010\032\024" +
    "\033\045\001\002\000\004\010\ufffb\001\002\000\040\002" +
    "\ufffd\004\ufffd\006\ufffd\007\ufffd\012\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\001\002\000\024\005\uffee\010\uffee\011\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\001" +
    "\002\000\022\004\015\012\006\026\034\027\035\030\033" +
    "\031\010\032\024\033\045\001\002\000\022\004\015\012" +
    "\006\026\034\027\035\030\033\031\010\032\024\033\045" +
    "\001\002\000\022\005\ufff6\010\ufff6\011\ufff6\013\ufff6\014" +
    "\ufff6\015\053\016\054\017\052\001\002\000\022\005\ufff7" +
    "\010\ufff7\011\ufff7\013\ufff7\014\ufff7\015\053\016\054\017" +
    "\052\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\046\002\016\003\040\004\035\005\010\006" +
    "\024\007\003\010\031\011\006\012\012\013\015\014\004" +
    "\015\030\016\020\017\017\020\025\021\041\022\027\023" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\103\021\041\022\027\023\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\076\004\035\005\010\006" +
    "\024\007\003\010\031\011\006\012\012\013\015\014\004" +
    "\015\030\016\020\017\017\020\025\021\041\022\027\023" +
    "\037\001\001\000\036\006\074\007\003\010\031\011\006" +
    "\012\012\013\015\014\004\015\030\016\020\017\017\020" +
    "\025\021\041\022\027\023\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\042\005\010" +
    "\006\024\007\003\010\031\011\006\012\012\013\015\014" +
    "\004\015\030\016\020\017\017\020\025\021\041\022\027" +
    "\023\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\045\007\003\010\031\011\006\012\012\013\015" +
    "\014\004\015\030\016\020\017\017\020\025\021\041\022" +
    "\027\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\047\007\003\010\031\011\006\012\012\013" +
    "\015\014\004\015\030\016\020\017\017\020\025\021\041" +
    "\022\027\023\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\060\017\017\020\025\021\041\022\027" +
    "\023\037\001\001\000\016\016\057\017\017\020\025\021" +
    "\041\022\027\023\037\001\001\000\016\016\054\017\017" +
    "\020\025\021\041\022\027\023\037\001\001\000\002\001" +
    "\001\000\014\017\056\020\025\021\041\022\027\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\006\062\007\003\010\031\011\006\012\012" +
    "\013\015\014\004\015\030\016\020\017\017\020\025\021" +
    "\041\022\027\023\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\066\007\003\010" +
    "\031\011\006\012\012\013\015\014\004\015\030\016\020" +
    "\017\017\020\025\021\041\022\027\023\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\071\007\003" +
    "\010\031\011\006\012\012\013\015\014\004\015\030\016" +
    "\020\017\017\020\025\021\041\022\027\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\042\005\010" +
    "\006\024\007\003\010\031\011\006\012\012\013\015\014" +
    "\004\015\030\016\020\017\017\020\025\021\041\022\027" +
    "\023\037\001\001\000\002\001\001\000\036\006\101\007" +
    "\003\010\031\011\006\012\012\013\015\014\004\015\030" +
    "\016\020\017\017\020\025\021\041\022\027\023\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\107\016\020\017\017\020\025\021\041\022" +
    "\027\023\037\001\001\000\020\015\106\016\020\017\017" +
    "\020\025\021\041\022\027\023\037\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //  This is no longer needed for CUP v0.11
		// Create a lexer that reads from
		// supplied input stream or standard input
		// if (in == null)
		//    in = System.in;
		// lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
		    	lexer.getColumn() +
		    	": Unrecognised token <" +
		    	lexer.getText() + ">";
		    throw new SyntaxSmplException(msg, ioe);
		}
	  
    }


		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " + 
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cdr ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCdr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cdr",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // car ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCar(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("car",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pairCheck ::= PAIRCHECK LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPairCheck(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pairCheck",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPair(e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pair",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // builtIn ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // builtIn ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // builtIn ::= pairCheck 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // builtIn ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolVal ::= BOOL 
            {
              SmplValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		boolean blit = (boolean)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(blit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolVal",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // strVal ::= CHARACTER 
            {
              SmplValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String chlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeChar(chlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // strVal ::= STRING 
            {
              SmplValue< ? > RESULT =null;
		int strlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int strlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String strlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeStrEscaped(strlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // val ::= REAL 
            {
              SmplValue< ? > RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(rlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // val ::= INTEGER 
            {
              SmplValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= strVal 
            {
              Exp RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > sv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(sv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= boolVal 
            {
              Exp RESULT =null;
		int bvleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > bv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(bv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= val 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > n = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // posneg ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT  = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // posneg ::= NEG factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // power ::= posneg 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // power ::= power POW posneg 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPow(p, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMod(t, p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpDiv(t, p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMul(t, p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpSub(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpAdd(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= builtIn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = body; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtDefinition(v, e); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtSequence(s);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				lst.add(s);
				RESULT = lst;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

